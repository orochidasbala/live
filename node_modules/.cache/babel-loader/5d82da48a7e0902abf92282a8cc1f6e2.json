{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/esnext.typed-array.find-last.js\";\nimport \"core-js/modules/esnext.typed-array.find-last-index.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport firebase from '@firebase/app';\nimport { __extends, __awaiter, __generator, __assign, __spreadArrays } from 'tslib';\nimport { FirebaseError } from '@firebase/util';\nimport { Component } from '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\n\n/**\r\n * Domain name for firebase storage.\r\n */\n\nvar DEFAULT_HOST = 'firebasestorage.googleapis.com';\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\n\nvar CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\n\nvar DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\n\nvar DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\nvar FirebaseStorageError =\n/** @class */\nfunction (_super) {\n  __extends(FirebaseStorageError, _super);\n\n  function FirebaseStorageError(code, message) {\n    var _this = _super.call(this, prependCode(code), \"Firebase Storage: \" + message + \" (\" + prependCode(code) + \")\") || this;\n\n    _this.customData = {\n      serverResponse: null\n    }; // Without this, `instanceof FirebaseStorageError`, in tests for example,\n    // returns false.\n\n    Object.setPrototypeOf(_this, FirebaseStorageError.prototype);\n    return _this;\n  }\n\n  FirebaseStorageError.prototype.codeEquals = function (code) {\n    return prependCode(code) === this.code;\n  };\n\n  Object.defineProperty(FirebaseStorageError.prototype, \"message\", {\n    get: function () {\n      if (this.customData.serverResponse) {\n        return this.message + \"\\n\" + this.customData.serverResponse;\n      } else {\n        return this.message;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseStorageError.prototype, \"serverResponse\", {\n    get: function () {\n      return this.customData.serverResponse;\n    },\n    set: function (serverResponse) {\n      this.customData.serverResponse = serverResponse;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return FirebaseStorageError;\n}(FirebaseError);\n\nvar Code = {\n  // Shared between all platforms\n  UNKNOWN: 'unknown',\n  OBJECT_NOT_FOUND: 'object-not-found',\n  BUCKET_NOT_FOUND: 'bucket-not-found',\n  PROJECT_NOT_FOUND: 'project-not-found',\n  QUOTA_EXCEEDED: 'quota-exceeded',\n  UNAUTHENTICATED: 'unauthenticated',\n  UNAUTHORIZED: 'unauthorized',\n  RETRY_LIMIT_EXCEEDED: 'retry-limit-exceeded',\n  INVALID_CHECKSUM: 'invalid-checksum',\n  CANCELED: 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME: 'invalid-event-name',\n  INVALID_URL: 'invalid-url',\n  INVALID_DEFAULT_BUCKET: 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET: 'no-default-bucket',\n  CANNOT_SLICE_BLOB: 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE: 'server-file-wrong-size',\n  NO_DOWNLOAD_URL: 'no-download-url',\n  INVALID_ARGUMENT: 'invalid-argument',\n  INVALID_ARGUMENT_COUNT: 'invalid-argument-count',\n  APP_DELETED: 'app-deleted',\n  INVALID_ROOT_OPERATION: 'invalid-root-operation',\n  INVALID_FORMAT: 'invalid-format',\n  INTERNAL_ERROR: 'internal-error',\n  UNSUPPORTED_ENVIRONMENT: 'unsupported-environment'\n};\n\nfunction prependCode(code) {\n  return 'storage/' + code;\n}\n\nfunction unknown() {\n  var message = 'An unknown error occurred, please check the error payload for ' + 'server response.';\n  return new FirebaseStorageError(Code.UNKNOWN, message);\n}\n\nfunction objectNotFound(path) {\n  return new FirebaseStorageError(Code.OBJECT_NOT_FOUND, \"Object '\" + path + \"' does not exist.\");\n}\n\nfunction quotaExceeded(bucket) {\n  return new FirebaseStorageError(Code.QUOTA_EXCEEDED, \"Quota for bucket '\" + bucket + \"' exceeded, please view quota on \" + 'https://firebase.google.com/pricing/.');\n}\n\nfunction unauthenticated() {\n  var message = 'User is not authenticated, please authenticate using Firebase ' + 'Authentication and try again.';\n  return new FirebaseStorageError(Code.UNAUTHENTICATED, message);\n}\n\nfunction unauthorized(path) {\n  return new FirebaseStorageError(Code.UNAUTHORIZED, \"User does not have permission to access '\" + path + \"'.\");\n}\n\nfunction retryLimitExceeded() {\n  return new FirebaseStorageError(Code.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');\n}\n\nfunction canceled() {\n  return new FirebaseStorageError(Code.CANCELED, 'User canceled the upload/download.');\n}\n\nfunction invalidUrl(url) {\n  return new FirebaseStorageError(Code.INVALID_URL, \"Invalid URL '\" + url + \"'.\");\n}\n\nfunction invalidDefaultBucket(bucket) {\n  return new FirebaseStorageError(Code.INVALID_DEFAULT_BUCKET, \"Invalid default bucket '\" + bucket + \"'.\");\n}\n\nfunction noDefaultBucket() {\n  return new FirebaseStorageError(Code.NO_DEFAULT_BUCKET, 'No default bucket ' + \"found. Did you set the '\" + CONFIG_STORAGE_BUCKET_KEY + \"' property when initializing the app?\");\n}\n\nfunction cannotSliceBlob() {\n  return new FirebaseStorageError(Code.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');\n}\n\nfunction serverFileWrongSize() {\n  return new FirebaseStorageError(Code.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');\n}\n\nfunction noDownloadURL() {\n  return new FirebaseStorageError(Code.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');\n}\n\nfunction invalidArgument(message) {\n  return new FirebaseStorageError(Code.INVALID_ARGUMENT, message);\n}\n\nfunction appDeleted() {\n  return new FirebaseStorageError(Code.APP_DELETED, 'The Firebase app was deleted.');\n}\n/**\r\n * @param name - The name of the operation that was invalid.\r\n */\n\n\nfunction invalidRootOperation(name) {\n  return new FirebaseStorageError(Code.INVALID_ROOT_OPERATION, \"The operation '\" + name + \"' cannot be performed on a root reference, create a non-root \" + \"reference using child, such as .child('file.png').\");\n}\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\n\n\nfunction invalidFormat(format, message) {\n  return new FirebaseStorageError(Code.INVALID_FORMAT, \"String does not match format '\" + format + \"': \" + message);\n}\n/**\r\n * @param message - A message describing the internal error.\r\n */\n\n\nfunction internalError(message) {\n  throw new FirebaseStorageError(Code.INTERNAL_ERROR, 'Internal error: ' + message);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar StringFormat = {\n  RAW: 'raw',\n  BASE64: 'base64',\n  BASE64URL: 'base64url',\n  DATA_URL: 'data_url'\n};\n\nvar StringData =\n/** @class */\nfunction () {\n  function StringData(data, contentType) {\n    this.data = data;\n    this.contentType = contentType || null;\n  }\n\n  return StringData;\n}();\n\nfunction dataFromString(format, stringData) {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n\n    case StringFormat.DATA_URL:\n      return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\n    // do nothing\n  } // assert(false);\n\n\n  throw unknown();\n}\n\nfunction utf8Bytes_(value) {\n  var b = [];\n\n  for (var i = 0; i < value.length; i++) {\n    var c = value.charCodeAt(i);\n\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | c >> 6, 128 | c & 63);\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          var valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            var hi = c;\n            var lo = value.charCodeAt(++i);\n            c = 65536 | (hi & 1023) << 10 | lo & 1023;\n            b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        }\n      }\n    }\n  }\n\n  return new Uint8Array(b);\n}\n\nfunction percentEncodedBytes_(value) {\n  var decoded;\n\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n\n  return utf8Bytes_(decoded);\n}\n\nfunction base64Bytes_(format, value) {\n  switch (format) {\n    case StringFormat.BASE64:\n      {\n        var hasMinus = value.indexOf('-') !== -1;\n        var hasUnder = value.indexOf('_') !== -1;\n\n        if (hasMinus || hasUnder) {\n          var invalidChar = hasMinus ? '-' : '_';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64url encoded?\");\n        }\n\n        break;\n      }\n\n    case StringFormat.BASE64URL:\n      {\n        var hasPlus = value.indexOf('+') !== -1;\n        var hasSlash = value.indexOf('/') !== -1;\n\n        if (hasPlus || hasSlash) {\n          var invalidChar = hasPlus ? '+' : '/';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\n        }\n\n        value = value.replace(/-/g, '+').replace(/_/g, '/');\n        break;\n      }\n    // do nothing\n  }\n\n  var bytes;\n\n  try {\n    bytes = atob(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n\n  var array = new Uint8Array(bytes.length);\n\n  for (var i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n\n  return array;\n}\n\nvar DataURLParts =\n/** @class */\nfunction () {\n  function DataURLParts(dataURL) {\n    this.base64 = false;\n    this.contentType = null;\n    var matches = dataURL.match(/^data:([^,]+)?,/);\n\n    if (matches === null) {\n      throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\n    }\n\n    var middle = matches[1] || null;\n\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64 ? middle.substring(0, middle.length - ';base64'.length) : middle;\n    }\n\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n\n  return DataURLParts;\n}();\n\nfunction dataURLBytes_(dataUrl) {\n  var parts = new DataURLParts(dataUrl);\n\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nfunction dataURLContentType_(dataUrl) {\n  var parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s, end) {\n  var longEnough = s.length >= end.length;\n\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar TaskEvent = {\n  /** Triggered whenever the task changes or progress is updated. */\n  STATE_CHANGED: 'state_changed'\n};\nvar InternalTaskState = {\n  RUNNING: 'running',\n  PAUSING: 'pausing',\n  PAUSED: 'paused',\n  SUCCESS: 'success',\n  CANCELING: 'canceling',\n  CANCELED: 'canceled',\n  ERROR: 'error'\n};\nvar TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\n\nfunction taskStateFromInternalTaskState(state) {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ErrorCode;\n\n(function (ErrorCode) {\n  ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\n  ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\n  ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\n})(ErrorCode || (ErrorCode = {}));\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and\r\n * doesn't work in React Native on Android.\r\n */\n\n\nvar NetworkXhrIo =\n/** @class */\nfunction () {\n  function NetworkXhrIo() {\n    var _this = this;\n\n    this.sent_ = false;\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(function (resolve) {\n      _this.xhr_.addEventListener('abort', function () {\n        _this.errorCode_ = ErrorCode.ABORT;\n        resolve(_this);\n      });\n\n      _this.xhr_.addEventListener('error', function () {\n        _this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve(_this);\n      });\n\n      _this.xhr_.addEventListener('load', function () {\n        resolve(_this);\n      });\n    });\n  }\n  /**\r\n   * @override\r\n   */\n\n\n  NetworkXhrIo.prototype.send = function (url, method, body, headers) {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n\n    if (headers !== undefined) {\n      for (var key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n\n    return this.sendPromise_;\n  };\n  /**\r\n   * @override\r\n   */\n\n\n  NetworkXhrIo.prototype.getErrorCode = function () {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n\n    return this.errorCode_;\n  };\n  /**\r\n   * @override\r\n   */\n\n\n  NetworkXhrIo.prototype.getStatus = function () {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  };\n  /**\r\n   * @override\r\n   */\n\n\n  NetworkXhrIo.prototype.getResponseText = function () {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponseText() before sending');\n    }\n\n    return this.xhr_.responseText;\n  };\n  /**\r\n   * Aborts the request.\r\n   * @override\r\n   */\n\n\n  NetworkXhrIo.prototype.abort = function () {\n    this.xhr_.abort();\n  };\n  /**\r\n   * @override\r\n   */\n\n\n  NetworkXhrIo.prototype.getResponseHeader = function (header) {\n    return this.xhr_.getResponseHeader(header);\n  };\n  /**\r\n   * @override\r\n   */\n\n\n  NetworkXhrIo.prototype.addUploadProgressListener = function (listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  };\n  /**\r\n   * @override\r\n   */\n\n\n  NetworkXhrIo.prototype.removeUploadProgressListener = function (listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  };\n\n  return NetworkXhrIo;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Factory-like class for creating XhrIo instances.\r\n */\n\n\nvar XhrIoPool =\n/** @class */\nfunction () {\n  function XhrIoPool() {}\n\n  XhrIoPool.prototype.createXhrIo = function () {\n    return new NetworkXhrIo();\n  };\n\n  return XhrIoPool;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isJustDef(p) {\n  return p !== void 0;\n} // eslint-disable-next-line @typescript-eslint/ban-types\n\n\nfunction isFunction(p) {\n  return typeof p === 'function';\n}\n\nfunction isNonArrayObject(p) {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nfunction isString(p) {\n  return typeof p === 'string' || p instanceof String;\n}\n\nfunction isNativeBlob(p) {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nfunction isNativeBlobDefined() {\n  return typeof Blob !== 'undefined';\n}\n\nfunction validateNumber(argument, minValue, maxValue, value) {\n  if (value < minValue) {\n    throw new FirebaseStorageError(Code.INVALID_ARGUMENT, \"Invalid value for '\" + argument + \"'. Expected \" + minValue + \" or greater.\");\n  }\n\n  if (value > maxValue) {\n    throw new FirebaseStorageError(Code.INVALID_ARGUMENT, \"Invalid value for '\" + argument + \"'. Expected \" + maxValue + \" or less.\");\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction getBlobBuilder() {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\n\n\nfunction getBlob() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var BlobBuilder = getBlobBuilder();\n\n  if (BlobBuilder !== undefined) {\n    var bb = new BlobBuilder();\n\n    for (var i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new FirebaseStorageError(Code.UNSUPPORTED_ENVIRONMENT, \"This browser doesn't seem to support creating Blobs\");\n    }\n  }\n}\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\n\n\nfunction sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n\n  return null;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n */\n\n\nvar FbsBlob =\n/** @class */\nfunction () {\n  function FbsBlob(data, elideCopy) {\n    var size = 0;\n    var blobType = '';\n\n    if (isNativeBlob(data)) {\n      this.data_ = data;\n      size = data.size;\n      blobType = data.type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data);\n      }\n\n      size = data.length;\n    }\n\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  FbsBlob.prototype.size = function () {\n    return this.size_;\n  };\n\n  FbsBlob.prototype.type = function () {\n    return this.type_;\n  };\n\n  FbsBlob.prototype.slice = function (startByte, endByte) {\n    if (isNativeBlob(this.data_)) {\n      var realBlob = this.data_;\n      var sliced = sliceBlob(realBlob, startByte, endByte);\n\n      if (sliced === null) {\n        return null;\n      }\n\n      return new FbsBlob(sliced);\n    } else {\n      var slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\n      return new FbsBlob(slice, true);\n    }\n  };\n\n  FbsBlob.getBlob = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (isNativeBlobDefined()) {\n      var blobby = args.map(function (val) {\n        if (val instanceof FbsBlob) {\n          return val.data_;\n        } else {\n          return val;\n        }\n      });\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      var uint8Arrays = args.map(function (val) {\n        if (isString(val)) {\n          return dataFromString(StringFormat.RAW, val).data;\n        } else {\n          // Blobs don't exist, so this has to be a Uint8Array.\n          return val.data_;\n        }\n      });\n      var finalLength_1 = 0;\n      uint8Arrays.forEach(function (array) {\n        finalLength_1 += array.byteLength;\n      });\n      var merged_1 = new Uint8Array(finalLength_1);\n      var index_1 = 0;\n      uint8Arrays.forEach(function (array) {\n        for (var i = 0; i < array.length; i++) {\n          merged_1[index_1++] = array[i];\n        }\n      });\n      return new FbsBlob(merged_1, true);\n    }\n  };\n\n  FbsBlob.prototype.uploadData = function () {\n    return this.data_;\n  };\n\n  return FbsBlob;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar Location =\n/** @class */\nfunction () {\n  function Location(bucket, path) {\n    this.bucket = bucket;\n    this.path_ = path;\n  }\n\n  Object.defineProperty(Location.prototype, \"path\", {\n    get: function () {\n      return this.path_;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Location.prototype, \"isRoot\", {\n    get: function () {\n      return this.path.length === 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Location.prototype.fullServerUrl = function () {\n    var encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  };\n\n  Location.prototype.bucketOnlyServerUrl = function () {\n    var encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  };\n\n  Location.makeFromBucketSpec = function (bucketString) {\n    var bucketLocation;\n\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  };\n\n  Location.makeFromUrl = function (url) {\n    var location = null;\n    var bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc) {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n\n    var gsPath = '(/(.*))?$';\n    var gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    var gsIndices = {\n      bucket: 1,\n      path: 3\n    };\n\n    function httpModify(loc) {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n\n    var version = 'v[A-Za-z0-9_]+';\n    var firebaseStorageHost = DEFAULT_HOST.replace(/[.]/g, '\\\\.');\n    var firebaseStoragePath = '(/([^?#]*).*)?$';\n    var firebaseStorageRegExp = new RegExp(\"^https?://\" + firebaseStorageHost + \"/\" + version + \"/b/\" + bucketDomain + \"/o\" + firebaseStoragePath, 'i');\n    var firebaseStorageIndices = {\n      bucket: 1,\n      path: 3\n    };\n    var cloudStorageHost = '(?:storage.googleapis.com|storage.cloud.google.com)';\n    var cloudStoragePath = '([^?#]*)';\n    var cloudStorageRegExp = new RegExp(\"^https?://\" + cloudStorageHost + \"/\" + bucketDomain + \"/\" + cloudStoragePath, 'i');\n    var cloudStorageIndices = {\n      bucket: 1,\n      path: 2\n    };\n    var groups = [{\n      regex: gsRegex,\n      indices: gsIndices,\n      postModify: gsModify\n    }, {\n      regex: firebaseStorageRegExp,\n      indices: firebaseStorageIndices,\n      postModify: httpModify\n    }, {\n      regex: cloudStorageRegExp,\n      indices: cloudStorageIndices,\n      postModify: httpModify\n    }];\n\n    for (var i = 0; i < groups.length; i++) {\n      var group = groups[i];\n      var captures = group.regex.exec(url);\n\n      if (captures) {\n        var bucketValue = captures[group.indices.bucket];\n        var pathValue = captures[group.indices.path];\n\n        if (!pathValue) {\n          pathValue = '';\n        }\n\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n\n    return location;\n  };\n\n  return Location;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\n\n\nfunction jsonObjectOrNull(s) {\n  var obj;\n\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\n\n/**\r\n * @return Null if the path is already at the root.\r\n */\n\n\nfunction parent(path) {\n  if (path.length === 0) {\n    return null;\n  }\n\n  var index = path.lastIndexOf('/');\n\n  if (index === -1) {\n    return '';\n  }\n\n  var newPath = path.slice(0, index);\n  return newPath;\n}\n\nfunction child(path, childPath) {\n  var canonicalChildPath = childPath.split('/').filter(function (component) {\n    return component.length > 0;\n  }).join('/');\n\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\n\n\nfunction lastComponent(path) {\n  var index = path.lastIndexOf('/', path.length - 2);\n\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction makeUrl(urlPart) {\n  return \"https://\" + DEFAULT_HOST + \"/v0\" + urlPart;\n}\n\nfunction makeQueryString(params) {\n  var encode = encodeURIComponent;\n  var queryPart = '?';\n\n  for (var key in params) {\n    if (params.hasOwnProperty(key)) {\n      var nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  } // Chop off the extra '&' or '?' on the end\n\n\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction noXform_(metadata, value) {\n  return value;\n}\n\nvar Mapping =\n/** @class */\nfunction () {\n  function Mapping(server, local, writable, xform) {\n    this.server = server;\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n\n  return Mapping;\n}();\n\nvar mappings_ = null;\n\nfunction xformPath(fullPath) {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nfunction getMappings() {\n  if (mappings_) {\n    return mappings_;\n  }\n\n  var mappings = [];\n  mappings.push(new Mapping('bucket'));\n  mappings.push(new Mapping('generation'));\n  mappings.push(new Mapping('metageneration'));\n  mappings.push(new Mapping('name', 'fullPath', true));\n\n  function mappingsXformPath(_metadata, fullPath) {\n    return xformPath(fullPath);\n  }\n\n  var nameMapping = new Mapping('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n  /**\r\n   * Coerces the second param to a number, if it is defined.\r\n   */\n\n  function xformSize(_metadata, size) {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n\n  var sizeMapping = new Mapping('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping('timeCreated'));\n  mappings.push(new Mapping('updated'));\n  mappings.push(new Mapping('md5Hash', null, true));\n  mappings.push(new Mapping('cacheControl', null, true));\n  mappings.push(new Mapping('contentDisposition', null, true));\n  mappings.push(new Mapping('contentEncoding', null, true));\n  mappings.push(new Mapping('contentLanguage', null, true));\n  mappings.push(new Mapping('contentType', null, true));\n  mappings.push(new Mapping('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nfunction addRef(metadata, service) {\n  function generateRef() {\n    var bucket = metadata['bucket'];\n    var path = metadata['fullPath'];\n    var loc = new Location(bucket, path);\n    return service.makeStorageReference(loc);\n  }\n\n  Object.defineProperty(metadata, 'ref', {\n    get: generateRef\n  });\n}\n\nfunction fromResource(service, resource, mappings) {\n  var metadata = {};\n  metadata['type'] = 'file';\n  var len = mappings.length;\n\n  for (var i = 0; i < len; i++) {\n    var mapping = mappings[i];\n    metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\n  }\n\n  addRef(metadata, service);\n  return metadata;\n}\n\nfunction fromResourceString(service, resourceString, mappings) {\n  var obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  var resource = obj;\n  return fromResource(service, resource, mappings);\n}\n\nfunction downloadUrlFromResourceString(metadata, resourceString) {\n  var obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n\n  var tokens = obj['downloadTokens'];\n\n  if (tokens.length === 0) {\n    return null;\n  }\n\n  var encode = encodeURIComponent;\n  var tokensList = tokens.split(',');\n  var urls = tokensList.map(function (token) {\n    var bucket = metadata['bucket'];\n    var path = metadata['fullPath'];\n    var urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    var base = makeUrl(urlPart);\n    var queryString = makeQueryString({\n      alt: 'media',\n      token: token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nfunction toResourceString(metadata, mappings) {\n  var resource = {};\n  var len = mappings.length;\n\n  for (var i = 0; i < len; i++) {\n    var mapping = mappings[i];\n\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n\n  return JSON.stringify(resource);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar PREFIXES_KEY = 'prefixes';\nvar ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(service, bucket, resource) {\n  var listResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n\n  if (resource[PREFIXES_KEY]) {\n    for (var _i = 0, _a = resource[PREFIXES_KEY]; _i < _a.length; _i++) {\n      var path = _a[_i];\n      var pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      var reference = service.makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (var _b = 0, _c = resource[ITEMS_KEY]; _b < _c.length; _b++) {\n      var item = _c[_b];\n      var reference = service.makeStorageReference(new Location(bucket, item['name']));\n      listResult.items.push(reference);\n    }\n  }\n\n  return listResult;\n}\n\nfunction fromResponseString(service, bucket, resourceString) {\n  var obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  var resource = obj;\n  return fromBackendResponse(service, bucket, resource);\n}\n\nvar RequestInfo =\n/** @class */\nfunction () {\n  function RequestInfo(url, method,\n  /**\r\n   * Returns the value with which to resolve the request's promise. Only called\r\n   * if the request is successful. Throw from this function to reject the\r\n   * returned Request's promise with the thrown error.\r\n   * Note: The XhrIo passed to this function may be reused after this callback\r\n   * returns. Do not keep a reference to it in any way.\r\n   */\n  handler, timeout) {\n    this.url = url;\n    this.method = method;\n    this.handler = handler;\n    this.timeout = timeout;\n    this.urlParams = {};\n    this.headers = {};\n    this.body = null;\n    this.errorHandler = null;\n    /**\r\n     * Called with the current number of bytes uploaded and total size (-1 if not\r\n     * computable) of the request body (i.e. used to report upload progress).\r\n     */\n\n    this.progressCallback = null;\n    this.successCodes = [200];\n    this.additionalRetryCodes = [];\n  }\n\n  return RequestInfo;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Throws the UNKNOWN FirebaseStorageError if cndn is false.\r\n */\n\n\nfunction handlerCheck(cndn) {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nfunction metadataHandler(service, mappings) {\n  function handler(xhr, text) {\n    var metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata;\n  }\n\n  return handler;\n}\n\nfunction listHandler(service, bucket) {\n  function handler(xhr, text) {\n    var listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult;\n  }\n\n  return handler;\n}\n\nfunction downloadUrlHandler(service, mappings) {\n  function handler(xhr, text) {\n    var metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(metadata, text);\n  }\n\n  return handler;\n}\n\nfunction sharedErrorHandler(location) {\n  function errorHandler(xhr, err) {\n    var newErr;\n\n    if (xhr.getStatus() === 401) {\n      newErr = unauthenticated();\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n\n  return errorHandler;\n}\n\nfunction objectErrorHandler(location) {\n  var shared = sharedErrorHandler(location);\n\n  function errorHandler(xhr, err) {\n    var newErr = shared(xhr, err);\n\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n\n  return errorHandler;\n}\n\nfunction getMetadata(service, location, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction list(service, location, delimiter, pageToken, maxResults) {\n  var urlParams = {};\n\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n\n  var urlPart = location.bucketOnlyServerUrl();\n  var url = makeUrl(urlPart);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nfunction getDownloadUrl(service, location, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction updateMetadata(service, location, metadata, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart);\n  var method = 'PATCH';\n  var body = toResourceString(metadata, mappings);\n  var headers = {\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction deleteObject(service, location) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart);\n  var method = 'DELETE';\n  var timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr, _text) {}\n\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction determineContentType_(metadata, blob) {\n  return metadata && metadata['contentType'] || blob && blob.type() || 'application/octet-stream';\n}\n\nfunction metadataForUpload_(location, blob, metadata) {\n  var metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n\n  return metadataClone;\n}\n\nfunction multipartUpload(service, location, mappings, blob, metadata) {\n  var urlPart = location.bucketOnlyServerUrl();\n  var headers = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary() {\n    var str = '';\n\n    for (var i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n\n    return str;\n  }\n\n  var boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  var metadata_ = metadataForUpload_(location, blob, metadata);\n  var metadataString = toResourceString(metadata_, mappings);\n  var preBlobPart = '--' + boundary + '\\r\\n' + 'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' + metadataString + '\\r\\n--' + boundary + '\\r\\n' + 'Content-Type: ' + metadata_['contentType'] + '\\r\\n\\r\\n';\n  var postBlobPart = '\\r\\n--' + boundary + '--';\n  var body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  var urlParams = {\n    name: metadata_['fullPath']\n  };\n  var url = makeUrl(urlPart);\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\n\n\nvar ResumableUploadStatus =\n/** @class */\nfunction () {\n  function ResumableUploadStatus(current, total, finalized, metadata) {\n    this.current = current;\n    this.total = total;\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n\n  return ResumableUploadStatus;\n}();\n\nfunction checkResumeHeader_(xhr, allowed) {\n  var status = null;\n\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n\n  var allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status;\n}\n\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\n  var urlPart = location.bucketOnlyServerUrl();\n  var metadataForUpload = metadataForUpload_(location, blob, metadata);\n  var urlParams = {\n    name: metadataForUpload['fullPath']\n  };\n  var url = makeUrl(urlPart);\n  var method = 'POST';\n  var headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': blob.size(),\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  var body = toResourceString(metadataForUpload, mappings);\n  var timeout = service.maxUploadRetryTime;\n\n  function handler(xhr) {\n    checkResumeHeader_(xhr);\n    var url;\n\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    handlerCheck(isString(url));\n    return url;\n  }\n\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\n\n\nfunction getResumableUploadStatus(service, location, url, blob) {\n  var headers = {\n    'X-Goog-Upload-Command': 'query'\n  };\n\n  function handler(xhr) {\n    var status = checkResumeHeader_(xhr, ['active', 'final']);\n    var sizeString = null;\n\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    var size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\n\n\nvar resumableUploadChunkSize = 256 * 1024;\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\n\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  var status_ = new ResumableUploadStatus(0, 0);\n\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n\n  var bytesLeft = status_.total - status_.current;\n  var bytesToUpload = bytesLeft;\n\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n\n  var startByte = status_.current;\n  var endByte = startByte + bytesToUpload;\n  var uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  var headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': status_.current\n  };\n  var body = blob.slice(startByte, endByte);\n\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(xhr, text) {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    var uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    var newCurrent = status_.current + bytesToUpload;\n    var size = blob.size();\n    var metadata;\n\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n\n    return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\n  }\n\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar Observer =\n/** @class */\nfunction () {\n  function Observer(nextOrObserver, error, complete) {\n    var asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\n\n    if (asFunctions) {\n      this.next = nextOrObserver;\n      this.error = error;\n      this.complete = complete;\n    } else {\n      var observer = nextOrObserver;\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n\n  return Observer;\n}();\n\nvar UploadTaskSnapshot =\n/** @class */\nfunction () {\n  function UploadTaskSnapshot(bytesTransferred, totalBytes, state, metadata, task, ref) {\n    this.bytesTransferred = bytesTransferred;\n    this.totalBytes = totalBytes;\n    this.state = state;\n    this.metadata = metadata;\n    this.task = task;\n    this.ref = ref;\n  }\n\n  return UploadTaskSnapshot;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\n\nfunction async(f) {\n  return function () {\n    var argsToForward = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      argsToForward[_i] = arguments[_i];\n    } // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n\n    Promise.resolve().then(function () {\n      return f.apply(void 0, argsToForward);\n    });\n  };\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n */\n\n\nvar UploadTask =\n/** @class */\nfunction () {\n  /**\r\n   * @param ref - The firebaseStorage.Reference object this task came\r\n   *     from, untyped to avoid cyclic dependencies.\r\n   * @param blob - The blob to upload.\r\n   */\n  function UploadTask(ref, blob, metadata) {\n    var _this = this;\n\n    if (metadata === void 0) {\n      metadata = null;\n    }\n    /**\r\n     * @internal\r\n     */\n\n\n    this._transferred = 0;\n    this._needToFetchStatus = false;\n    this._needToFetchMetadata = false;\n    this._observers = [];\n    this._error = undefined;\n    this._uploadUrl = undefined;\n    this._request = undefined;\n    this._chunkMultiplier = 1;\n    this._resolve = undefined;\n    this._reject = undefined;\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n\n    this._errorHandler = function (error) {\n      _this._request = undefined;\n      _this._chunkMultiplier = 1;\n\n      if (error.codeEquals(Code.CANCELED)) {\n        _this._needToFetchStatus = true;\n\n        _this.completeTransitions_();\n      } else {\n        _this._error = error;\n\n        _this._transition(InternalTaskState.ERROR);\n      }\n    };\n\n    this._metadataErrorHandler = function (error) {\n      _this._request = undefined;\n\n      if (error.codeEquals(Code.CANCELED)) {\n        _this.completeTransitions_();\n      } else {\n        _this._error = error;\n\n        _this._transition(InternalTaskState.ERROR);\n      }\n    };\n\n    this._promise = new Promise(function (resolve, reject) {\n      _this._resolve = resolve;\n      _this._reject = reject;\n\n      _this._start();\n    }); // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n\n    this._promise.then(null, function () {});\n  }\n\n  UploadTask.prototype._makeProgressCallback = function () {\n    var _this = this;\n\n    var sizeBefore = this._transferred;\n    return function (loaded) {\n      return _this._updateProgress(sizeBefore + loaded);\n    };\n  };\n\n  UploadTask.prototype._shouldDoResumable = function (blob) {\n    return blob.size() > 256 * 1024;\n  };\n\n  UploadTask.prototype._start = function () {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n\n    if (this._request !== undefined) {\n      return;\n    }\n\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  };\n\n  UploadTask.prototype._resolveToken = function (callback) {\n    var _this = this; // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n\n    this._ref.storage.getAuthToken().then(function (authToken) {\n      switch (_this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken);\n          break;\n\n        case InternalTaskState.CANCELING:\n          _this._transition(InternalTaskState.CANCELED);\n\n          break;\n\n        case InternalTaskState.PAUSING:\n          _this._transition(InternalTaskState.PAUSED);\n\n          break;\n      }\n    });\n  }; // TODO(andysoto): assert false\n\n\n  UploadTask.prototype._createResumable = function () {\n    var _this = this;\n\n    this._resolveToken(function (authToken) {\n      var requestInfo = createResumableUpload(_this._ref.storage, _this._ref._location, _this._mappings, _this._blob, _this._metadata);\n\n      var createRequest = _this._ref.storage.makeRequest(requestInfo, authToken);\n\n      _this._request = createRequest;\n      createRequest.getPromise().then(function (url) {\n        _this._request = undefined;\n        _this._uploadUrl = url;\n        _this._needToFetchStatus = false;\n\n        _this.completeTransitions_();\n      }, _this._errorHandler);\n    });\n  };\n\n  UploadTask.prototype._fetchStatus = function () {\n    var _this = this; // TODO(andysoto): assert(this.uploadUrl_ !== null);\n\n\n    var url = this._uploadUrl;\n\n    this._resolveToken(function (authToken) {\n      var requestInfo = getResumableUploadStatus(_this._ref.storage, _this._ref._location, url, _this._blob);\n\n      var statusRequest = _this._ref.storage.makeRequest(requestInfo, authToken);\n\n      _this._request = statusRequest;\n      statusRequest.getPromise().then(function (status) {\n        status = status;\n        _this._request = undefined;\n\n        _this._updateProgress(status.current);\n\n        _this._needToFetchStatus = false;\n\n        if (status.finalized) {\n          _this._needToFetchMetadata = true;\n        }\n\n        _this.completeTransitions_();\n      }, _this._errorHandler);\n    });\n  };\n\n  UploadTask.prototype._continueUpload = function () {\n    var _this = this;\n\n    var chunkSize = resumableUploadChunkSize * this._chunkMultiplier;\n    var status = new ResumableUploadStatus(this._transferred, this._blob.size()); // TODO(andysoto): assert(this.uploadUrl_ !== null);\n\n    var url = this._uploadUrl;\n\n    this._resolveToken(function (authToken) {\n      var requestInfo;\n\n      try {\n        requestInfo = continueResumableUpload(_this._ref._location, _this._ref.storage, url, _this._blob, chunkSize, _this._mappings, status, _this._makeProgressCallback());\n      } catch (e) {\n        _this._error = e;\n\n        _this._transition(InternalTaskState.ERROR);\n\n        return;\n      }\n\n      var uploadRequest = _this._ref.storage.makeRequest(requestInfo, authToken);\n\n      _this._request = uploadRequest;\n      uploadRequest.getPromise().then(function (newStatus) {\n        _this._increaseMultiplier();\n\n        _this._request = undefined;\n\n        _this._updateProgress(newStatus.current);\n\n        if (newStatus.finalized) {\n          _this._metadata = newStatus.metadata;\n\n          _this._transition(InternalTaskState.SUCCESS);\n        } else {\n          _this.completeTransitions_();\n        }\n      }, _this._errorHandler);\n    });\n  };\n\n  UploadTask.prototype._increaseMultiplier = function () {\n    var currentSize = resumableUploadChunkSize * this._chunkMultiplier; // Max chunk size is 32M.\n\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  };\n\n  UploadTask.prototype._fetchMetadata = function () {\n    var _this = this;\n\n    this._resolveToken(function (authToken) {\n      var requestInfo = getMetadata(_this._ref.storage, _this._ref._location, _this._mappings);\n\n      var metadataRequest = _this._ref.storage.makeRequest(requestInfo, authToken);\n\n      _this._request = metadataRequest;\n      metadataRequest.getPromise().then(function (metadata) {\n        _this._request = undefined;\n        _this._metadata = metadata;\n\n        _this._transition(InternalTaskState.SUCCESS);\n      }, _this._metadataErrorHandler);\n    });\n  };\n\n  UploadTask.prototype._oneShotUpload = function () {\n    var _this = this;\n\n    this._resolveToken(function (authToken) {\n      var requestInfo = multipartUpload(_this._ref.storage, _this._ref._location, _this._mappings, _this._blob, _this._metadata);\n\n      var multipartRequest = _this._ref.storage.makeRequest(requestInfo, authToken);\n\n      _this._request = multipartRequest;\n      multipartRequest.getPromise().then(function (metadata) {\n        _this._request = undefined;\n        _this._metadata = metadata;\n\n        _this._updateProgress(_this._blob.size());\n\n        _this._transition(InternalTaskState.SUCCESS);\n      }, _this._errorHandler);\n    });\n  };\n\n  UploadTask.prototype._updateProgress = function (transferred) {\n    var old = this._transferred;\n    this._transferred = transferred; // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  };\n\n  UploadTask.prototype._transition = function (state) {\n    if (this._state === state) {\n      return;\n    }\n\n    switch (state) {\n      case InternalTaskState.CANCELING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n\n        break;\n\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n\n        break;\n\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        var wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n\n        if (wasPaused) {\n          this._notifyObservers();\n\n          this._start();\n        }\n\n        break;\n\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n    }\n  };\n\n  UploadTask.prototype.completeTransitions_ = function () {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n\n        break;\n\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n\n        break;\n\n      case InternalTaskState.RUNNING:\n        this._start();\n\n        break;\n    }\n  };\n\n  Object.defineProperty(UploadTask.prototype, \"snapshot\", {\n    get: function () {\n      var externalState = taskStateFromInternalTaskState(this._state);\n      return new UploadTaskSnapshot(this._transferred, this._blob.size(), externalState, this._metadata, this, this._ref);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Adds a callback for an event.\r\n   * @param type - The type of event to listen for.\r\n   */\n\n  UploadTask.prototype.on = function (type, nextOrObserver, error, completed) {\n    var _this = this;\n\n    var observer = new Observer(nextOrObserver, error, completed);\n\n    this._addObserver(observer);\n\n    return function () {\n      _this._removeObserver(observer);\n    };\n  };\n  /**\r\n   * This object behaves like a Promise, and resolves with its snapshot data\r\n   * when the upload completes.\r\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n   * @param onRejected - The rejection callback.\r\n   */\n\n\n  UploadTask.prototype.then = function (onFulfilled, onRejected) {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then(onFulfilled, onRejected);\n  };\n  /**\r\n   * Equivalent to calling `then(null, onRejected)`.\r\n   */\n\n\n  UploadTask.prototype.catch = function (onRejected) {\n    return this.then(null, onRejected);\n  };\n  /**\r\n   * Adds the given observer.\r\n   */\n\n\n  UploadTask.prototype._addObserver = function (observer) {\n    this._observers.push(observer);\n\n    this._notifyObserver(observer);\n  };\n  /**\r\n   * Removes the given observer.\r\n   */\n\n\n  UploadTask.prototype._removeObserver = function (observer) {\n    var i = this._observers.indexOf(observer);\n\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  };\n\n  UploadTask.prototype._notifyObservers = function () {\n    var _this = this;\n\n    this._finishPromise();\n\n    var observers = this._observers.slice();\n\n    observers.forEach(function (observer) {\n      _this._notifyObserver(observer);\n    });\n  };\n\n  UploadTask.prototype._finishPromise = function () {\n    if (this._resolve !== undefined) {\n      var triggered = true;\n\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          async(this._resolve.bind(null, this.snapshot))();\n          break;\n\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          var toCall = this._reject;\n          async(toCall.bind(null, this._error))();\n          break;\n\n        default:\n          triggered = false;\n          break;\n      }\n\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  };\n\n  UploadTask.prototype._notifyObserver = function (observer) {\n    var externalState = taskStateFromInternalTaskState(this._state);\n\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          async(observer.next.bind(observer, this.snapshot))();\n        }\n\n        break;\n\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          async(observer.complete.bind(observer))();\n        }\n\n        break;\n\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n\n        break;\n\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n\n    }\n  };\n  /**\r\n   * Resumes a paused task. Has no effect on a currently running or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n\n\n  UploadTask.prototype.resume = function () {\n    var valid = this._state === InternalTaskState.PAUSED || this._state === InternalTaskState.PAUSING;\n\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n\n    return valid;\n  };\n  /**\r\n   * Pauses a currently running task. Has no effect on a paused or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n\n\n  UploadTask.prototype.pause = function () {\n    var valid = this._state === InternalTaskState.RUNNING;\n\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n\n    return valid;\n  };\n  /**\r\n   * Cancels a currently running or paused task. Has no effect on a complete or\r\n   * failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n\n\n  UploadTask.prototype.cancel = function () {\n    var valid = this._state === InternalTaskState.RUNNING || this._state === InternalTaskState.PAUSING;\n\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n\n    return valid;\n  };\n\n  return UploadTask;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @param location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\n\n\nvar Reference =\n/** @class */\nfunction () {\n  function Reference(_service, location) {\n    this._service = _service;\n\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location);\n    }\n  }\n  /**\r\n   * @returns The URL for the bucket and path this object references,\r\n   *     in the form gs://<bucket>/<object-path>\r\n   * @override\r\n   */\n\n\n  Reference.prototype.toString = function () {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  };\n\n  Reference.prototype.newRef = function (service, location) {\n    return new Reference(service, location);\n  };\n\n  Object.defineProperty(Reference.prototype, \"root\", {\n    /**\r\n     * @returns An reference to the root of this\r\n     *     object's bucket.\r\n     */\n    get: function () {\n      var location = new Location(this._location.bucket, '');\n      return this.newRef(this._service, location);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"bucket\", {\n    get: function () {\n      return this._location.bucket;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"fullPath\", {\n    get: function () {\n      return this._location.path;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"name\", {\n    get: function () {\n      return lastComponent(this._location.path);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"storage\", {\n    get: function () {\n      return this._service;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"parent\", {\n    get: function () {\n      var newPath = parent(this._location.path);\n\n      if (newPath === null) {\n        return null;\n      }\n\n      var location = new Location(this._location.bucket, newPath);\n      return new Reference(this._service, location);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Reference.prototype._throwIfRoot = function (name) {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  };\n\n  return Reference;\n}();\n/**\r\n * Uploads a blob to this object's location.\r\n * @public\r\n * @param ref - Storage Reference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded string.\r\n * @returns An UploadTask that lets you control and\r\n *     observe the upload.\r\n */\n\n\nfunction uploadBytesResumable(ref, data, metadata) {\n  if (metadata === void 0) {\n    metadata = null;\n  }\n\n  ref._throwIfRoot('uploadBytesResumable');\n\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n/**\r\n * Uploads a string to this object's location.\r\n * @public\r\n * @param ref - Storage Reference where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the newly uploaded object.\r\n * @returns An UploadTask that lets you control and\r\n *     observe the upload.\r\n */\n\n\nfunction uploadString(ref, value, format, metadata) {\n  if (format === void 0) {\n    format = StringFormat.RAW;\n  }\n\n  ref._throwIfRoot('putString');\n\n  var data = dataFromString(format, value);\n\n  var metadataClone = __assign({}, metadata);\n\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType;\n  }\n\n  return new UploadTask(ref, new FbsBlob(data.data, true), metadataClone);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - Storage Reference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\n\n\nfunction listAll(ref) {\n  var accumulator = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(function () {\n    return accumulator;\n  });\n}\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @internal\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\n\n\nfunction listAllHelper(ref, accumulator, pageToken) {\n  return __awaiter(this, void 0, void 0, function () {\n    var opt, nextPage;\n\n    var _a, _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          opt = {\n            // maxResults is 1000 by default.\n            pageToken: pageToken\n          };\n          return [4\n          /*yield*/\n          , list$1(ref, opt)];\n\n        case 1:\n          nextPage = _c.sent();\n\n          (_a = accumulator.prefixes).push.apply(_a, nextPage.prefixes);\n\n          (_b = accumulator.items).push.apply(_b, nextPage.items);\n\n          if (!(nextPage.nextPageToken != null)) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , listAllHelper(ref, accumulator, nextPage.nextPageToken)];\n\n        case 2:\n          _c.sent();\n\n          _c.label = 3;\n\n        case 3:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - Storage Reference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\n\n\nfunction list$1(ref, options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken, op, requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (options != null) {\n            if (typeof options.maxResults === 'number') {\n              validateNumber('options.maxResults',\n              /* minValue= */\n              1,\n              /* maxValue= */\n              1000, options.maxResults);\n            }\n          }\n\n          return [4\n          /*yield*/\n          , ref.storage.getAuthToken()];\n\n        case 1:\n          authToken = _a.sent();\n          op = options || {};\n          requestInfo = list(ref.storage, ref._location,\n          /*delimiter= */\n          '/', op.pageToken, op.maxResults);\n          return [2\n          /*return*/\n          , ref.storage.makeRequest(requestInfo, authToken).getPromise()];\n      }\n    });\n  });\n}\n/**\r\n * A promise that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - Storage Reference to get metadata from.\r\n */\n\n\nfunction getMetadata$1(ref) {\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken, requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ref._throwIfRoot('getMetadata');\n\n          return [4\n          /*yield*/\n          , ref.storage.getAuthToken()];\n\n        case 1:\n          authToken = _a.sent();\n          requestInfo = getMetadata(ref.storage, ref._location, getMappings());\n          return [2\n          /*return*/\n          , ref.storage.makeRequest(requestInfo, authToken).getPromise()];\n      }\n    });\n  });\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - Storage Reference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A promise that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\n\n\nfunction updateMetadata$1(ref, metadata) {\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken, requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ref._throwIfRoot('updateMetadata');\n\n          return [4\n          /*yield*/\n          , ref.storage.getAuthToken()];\n\n        case 1:\n          authToken = _a.sent();\n          requestInfo = updateMetadata(ref.storage, ref._location, metadata, getMappings());\n          return [2\n          /*return*/\n          , ref.storage.makeRequest(requestInfo, authToken).getPromise()];\n      }\n    });\n  });\n}\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A promise that resolves with the download\r\n *     URL for this object.\r\n */\n\n\nfunction getDownloadURL(ref) {\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken, requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ref._throwIfRoot('getDownloadURL');\n\n          return [4\n          /*yield*/\n          , ref.storage.getAuthToken()];\n\n        case 1:\n          authToken = _a.sent();\n          requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\n          return [2\n          /*return*/\n          , ref.storage.makeRequest(requestInfo, authToken).getPromise().then(function (url) {\n            if (url === null) {\n              throw noDownloadURL();\n            }\n\n            return url;\n          })];\n      }\n    });\n  });\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - Storage Reference for object to delete.\r\n * @returns A promise that resolves if the deletion succeeds.\r\n */\n\n\nfunction deleteObject$1(ref) {\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken, requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ref._throwIfRoot('deleteObject');\n\n          return [4\n          /*yield*/\n          , ref.storage.getAuthToken()];\n\n        case 1:\n          authToken = _a.sent();\n          requestInfo = deleteObject(ref.storage, ref._location);\n          return [2\n          /*return*/\n          , ref.storage.makeRequest(requestInfo, authToken).getPromise()];\n      }\n    });\n  });\n}\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n * @internal\r\n *\r\n * @param ref - Storage Reference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n */\n\n\nfunction getChild(ref, childPath) {\n  var newPath = child(ref._location.path, childPath);\n  var location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar UploadTaskSnapshotCompat =\n/** @class */\nfunction () {\n  function UploadTaskSnapshotCompat(_delegate, task, ref) {\n    this._delegate = _delegate;\n    this.task = task;\n    this.ref = ref;\n  }\n\n  Object.defineProperty(UploadTaskSnapshotCompat.prototype, \"bytesTransferred\", {\n    get: function () {\n      return this._delegate.bytesTransferred;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UploadTaskSnapshotCompat.prototype, \"metadata\", {\n    get: function () {\n      return this._delegate.metadata;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UploadTaskSnapshotCompat.prototype, \"state\", {\n    get: function () {\n      return this._delegate.state;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UploadTaskSnapshotCompat.prototype, \"totalBytes\", {\n    get: function () {\n      return this._delegate.totalBytes;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return UploadTaskSnapshotCompat;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar UploadTaskCompat =\n/** @class */\nfunction () {\n  function UploadTaskCompat(_delegate, _ref) {\n    this._delegate = _delegate;\n    this._ref = _ref;\n    this.cancel = this._delegate.cancel.bind(this._delegate);\n    this.catch = this._delegate.catch.bind(this._delegate);\n    this.pause = this._delegate.pause.bind(this._delegate);\n    this.resume = this._delegate.resume.bind(this._delegate);\n    this._snapshot = new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);\n  }\n\n  Object.defineProperty(UploadTaskCompat.prototype, \"snapshot\", {\n    get: function () {\n      return this._snapshot;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  UploadTaskCompat.prototype.then = function (onFulfilled, onRejected) {\n    var _this = this;\n\n    return this._delegate.then(function (snapshot) {\n      if (onFulfilled) {\n        return onFulfilled(new UploadTaskSnapshotCompat(snapshot, _this, _this._ref));\n      }\n    }, onRejected);\n  };\n\n  UploadTaskCompat.prototype.on = function (type, nextOrObserver, error, completed) {\n    var _this = this;\n\n    var wrappedNextOrObserver = undefined;\n\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = function (taskSnapshot) {\n          return nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, _this, _this._ref));\n        };\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next ? function (taskSnapshot) {\n            return nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, _this, _this._ref));\n          } : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n\n    return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);\n  };\n\n  return UploadTaskCompat;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ListResultCompat =\n/** @class */\nfunction () {\n  function ListResultCompat(_delegate, _service) {\n    this._delegate = _delegate;\n    this._service = _service;\n  }\n\n  Object.defineProperty(ListResultCompat.prototype, \"prefixes\", {\n    get: function () {\n      var _this = this;\n\n      return this._delegate.prefixes.map(function (ref) {\n        return new ReferenceCompat(ref, _this._service);\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ListResultCompat.prototype, \"items\", {\n    get: function () {\n      var _this = this;\n\n      return this._delegate.items.map(function (ref) {\n        return new ReferenceCompat(ref, _this._service);\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ListResultCompat.prototype, \"nextPageToken\", {\n    get: function () {\n      return this._delegate.nextPageToken || null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return ListResultCompat;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *  http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ReferenceCompat =\n/** @class */\nfunction () {\n  function ReferenceCompat(_delegate, storage) {\n    this._delegate = _delegate;\n    this.storage = storage;\n  }\n\n  Object.defineProperty(ReferenceCompat.prototype, \"name\", {\n    get: function () {\n      return this._delegate.name;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReferenceCompat.prototype, \"bucket\", {\n    get: function () {\n      return this._delegate.bucket;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReferenceCompat.prototype, \"fullPath\", {\n    get: function () {\n      return this._delegate.fullPath;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ReferenceCompat.prototype.toString = function () {\n    return this._delegate.toString();\n  };\n  /**\r\n   * @returns A reference to the object obtained by\r\n   * appending childPath, removing any duplicate, beginning, or trailing\r\n   * slashes.\r\n   */\n\n\n  ReferenceCompat.prototype.child = function (childPath) {\n    var reference = getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  };\n\n  Object.defineProperty(ReferenceCompat.prototype, \"root\", {\n    get: function () {\n      return new ReferenceCompat(this._delegate.root, this.storage);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReferenceCompat.prototype, \"parent\", {\n    /**\r\n     * @returns A reference to the parent of the\r\n     * current object, or null if the current object is the root.\r\n     */\n    get: function () {\n      var reference = this._delegate.parent;\n\n      if (reference == null) {\n        return null;\n      }\n\n      return new ReferenceCompat(reference, this.storage);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Uploads a blob to this object's location.\r\n   * @param data - The blob to upload.\r\n   * @returns An UploadTask that lets you control and\r\n   * observe the upload.\r\n   */\n\n  ReferenceCompat.prototype.put = function (data, metadata) {\n    this._throwIfRoot('put');\n\n    return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);\n  };\n  /**\r\n   * Uploads a string to this object's location.\r\n   * @param value - The string to upload.\r\n   * @param format - The format of the string to upload.\r\n   * @returns An UploadTask that lets you control and\r\n   * observe the upload.\r\n   */\n\n\n  ReferenceCompat.prototype.putString = function (value, format, metadata) {\n    if (format === void 0) {\n      format = StringFormat.RAW;\n    }\n\n    this._throwIfRoot('putString');\n\n    return new UploadTaskCompat(uploadString(this._delegate, value, format, metadata), this);\n  };\n  /**\r\n   * List all items (files) and prefixes (folders) under this storage reference.\r\n   *\r\n   * This is a helper method for calling list() repeatedly until there are\r\n   * no more results. The default pagination size is 1000.\r\n   *\r\n   * Note: The results may not be consistent if objects are changed while this\r\n   * operation is running.\r\n   *\r\n   * Warning: listAll may potentially consume too many resources if there are\r\n   * too many results.\r\n   *\r\n   * @returns A Promise that resolves with all the items and prefixes under\r\n   *  the current storage reference. `prefixes` contains references to\r\n   *  sub-directories and `items` contains references to objects in this\r\n   *  folder. `nextPageToken` is never returned.\r\n   */\n\n\n  ReferenceCompat.prototype.listAll = function () {\n    var _this = this;\n\n    return listAll(this._delegate).then(function (r) {\n      return new ListResultCompat(r, _this.storage);\n    });\n  };\n  /**\r\n   * List items (files) and prefixes (folders) under this storage reference.\r\n   *\r\n   * List API is only available for Firebase Rules Version 2.\r\n   *\r\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\r\n   *\r\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n   * support objects whose paths end with \"/\" or contain two consecutive\r\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n   * list() may fail if there are too many unsupported objects in the bucket.\r\n   *\r\n   * @param options - See ListOptions for details.\r\n   * @returns A Promise that resolves with the items and prefixes.\r\n   * `prefixes` contains references to sub-folders and `items`\r\n   * contains references to objects in this folder. `nextPageToken`\r\n   * can be used to get the rest of the results.\r\n   */\n\n\n  ReferenceCompat.prototype.list = function (options) {\n    var _this = this;\n\n    return list$1(this._delegate, options).then(function (r) {\n      return new ListResultCompat(r, _this.storage);\n    });\n  };\n  /**\r\n   * A promise that resolves with the metadata for this object. If this\r\n   * object doesn't exist or metadata cannot be retreived, the promise is\r\n   * rejected.\r\n   */\n\n\n  ReferenceCompat.prototype.getMetadata = function () {\n    return getMetadata$1(this._delegate);\n  };\n  /**\r\n   * Updates the metadata for this object.\r\n   * @param metadata - The new metadata for the object.\r\n   * Only values that have been explicitly set will be changed. Explicitly\r\n   * setting a value to null will remove the metadata.\r\n   * @returns A promise that resolves\r\n   * with the new metadata for this object.\r\n   * @see firebaseStorage.Reference.prototype.getMetadata\r\n   */\n\n\n  ReferenceCompat.prototype.updateMetadata = function (metadata) {\n    return updateMetadata$1(this._delegate, metadata);\n  };\n  /**\r\n   * @returns A promise that resolves with the download\r\n   * URL for this object.\r\n   */\n\n\n  ReferenceCompat.prototype.getDownloadURL = function () {\n    return getDownloadURL(this._delegate);\n  };\n  /**\r\n   * Deletes the object at this location.\r\n   * @returns A promise that resolves if the deletion succeeds.\r\n   */\n\n\n  ReferenceCompat.prototype.delete = function () {\n    this._throwIfRoot('delete');\n\n    return deleteObject$1(this._delegate);\n  };\n\n  ReferenceCompat.prototype._throwIfRoot = function (name) {\n    if (this._delegate._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  };\n\n  return ReferenceCompat;\n}();\n/**\r\n * A request whose promise always fails.\r\n */\n\n\nvar FailRequest =\n/** @class */\nfunction () {\n  function FailRequest(error) {\n    this.promise_ = Promise.reject(error);\n  }\n  /** @inheritDoc */\n\n\n  FailRequest.prototype.getPromise = function () {\n    return this.promise_;\n  };\n  /** @inheritDoc */\n\n\n  FailRequest.prototype.cancel = function (_appDelete) {};\n\n  return FailRequest;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param f May be invoked\r\n *     before the function returns.\r\n * @param callback Get all the arguments passed to the function\r\n *     passed to f, including the initial boolean.\r\n */\n\n\nfunction start(f, // eslint-disable-next-line @typescript-eslint/no-explicit-any\ncallback, timeout) {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  var waitSeconds = 1; // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  var timeoutId = null;\n  var hitTimeout = false;\n  var cancelState = 0;\n\n  function canceled() {\n    return cancelState === 2;\n  }\n\n  var triggeredCallback = false;\n\n  function triggerCallback() {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis) {\n    timeoutId = setTimeout(function () {\n      timeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function handler(success) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    if (triggeredCallback) {\n      return;\n    }\n\n    if (success) {\n      triggerCallback.call.apply(triggerCallback, __spreadArrays([null, success], args));\n      return;\n    }\n\n    var mustStop = canceled() || hitTimeout;\n\n    if (mustStop) {\n      triggerCallback.call.apply(triggerCallback, __spreadArrays([null, success], args));\n      return;\n    }\n\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n\n    var waitMillis;\n\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n\n    callWithDelay(waitMillis);\n  }\n\n  var stopped = false;\n\n  function stop(wasTimeout) {\n    if (stopped) {\n      return;\n    }\n\n    stopped = true;\n\n    if (triggeredCallback) {\n      return;\n    }\n\n    if (timeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n\n      clearTimeout(timeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n\n  callWithDelay(0);\n  setTimeout(function () {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\n\n\nfunction stop(id) {\n  id(false);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar NetworkRequest =\n/** @class */\nfunction () {\n  function NetworkRequest(url, method, headers, body, successCodes, additionalRetryCodes, callback, errorCallback, timeout, progressCallback, pool) {\n    var _this = this;\n\n    this.pendingXhr_ = null;\n    this.backoffId_ = null;\n    this.canceled_ = false;\n    this.appDelete_ = false;\n    this.url_ = url;\n    this.method_ = method;\n    this.headers_ = headers;\n    this.body_ = body;\n    this.successCodes_ = successCodes.slice();\n    this.additionalRetryCodes_ = additionalRetryCodes.slice();\n    this.callback_ = callback;\n    this.errorCallback_ = errorCallback;\n    this.progressCallback_ = progressCallback;\n    this.timeout_ = timeout;\n    this.pool_ = pool;\n    this.promise_ = new Promise(function (resolve, reject) {\n      _this.resolve_ = resolve;\n      _this.reject_ = reject;\n\n      _this.start_();\n    });\n  }\n  /**\r\n   * Actually starts the retry loop.\r\n   */\n\n\n  NetworkRequest.prototype.start_ = function () {\n    var self = this;\n\n    function doTheRequest(backoffCallback, canceled) {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n\n      var xhr = self.pool_.createXhrIo();\n      self.pendingXhr_ = xhr;\n\n      function progressListener(progressEvent) {\n        var loaded = progressEvent.loaded;\n        var total = progressEvent.lengthComputable ? progressEvent.total : -1;\n\n        if (self.progressCallback_ !== null) {\n          self.progressCallback_(loaded, total);\n        }\n      }\n\n      if (self.progressCallback_ !== null) {\n        xhr.addUploadProgressListener(progressListener);\n      } // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n\n      xhr.send(self.url_, self.method_, self.body_, self.headers_).then(function (xhr) {\n        if (self.progressCallback_ !== null) {\n          xhr.removeUploadProgressListener(progressListener);\n        }\n\n        self.pendingXhr_ = null;\n        xhr = xhr;\n        var hitServer = xhr.getErrorCode() === ErrorCode.NO_ERROR;\n        var status = xhr.getStatus();\n\n        if (!hitServer || self.isRetryStatusCode_(status)) {\n          var wasCanceled = xhr.getErrorCode() === ErrorCode.ABORT;\n          backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\n          return;\n        }\n\n        var successCode = self.successCodes_.indexOf(status) !== -1;\n        backoffCallback(true, new RequestEndStatus(successCode, xhr));\n      });\n    }\n    /**\r\n     * @param requestWentThrough - True if the request eventually went\r\n     *     through, false if it hit the retry limit or was canceled.\r\n     */\n\n\n    function backoffDone(requestWentThrough, status) {\n      var resolve = self.resolve_;\n      var reject = self.reject_;\n      var xhr = status.xhr;\n\n      if (status.wasSuccessCode) {\n        try {\n          var result = self.callback_(xhr, xhr.getResponseText());\n\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (xhr !== null) {\n          var err = unknown();\n          err.serverResponse = xhr.getResponseText();\n\n          if (self.errorCallback_) {\n            reject(self.errorCallback_(xhr, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            var err = self.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            var err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    }\n\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  };\n  /** @inheritDoc */\n\n\n  NetworkRequest.prototype.getPromise = function () {\n    return this.promise_;\n  };\n  /** @inheritDoc */\n\n\n  NetworkRequest.prototype.cancel = function (appDelete) {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n\n    if (this.pendingXhr_ !== null) {\n      this.pendingXhr_.abort();\n    }\n  };\n\n  NetworkRequest.prototype.isRetryStatusCode_ = function (status) {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    var isFiveHundredCode = status >= 500 && status < 600;\n    var extraRetryCodes = [// Request Timeout: web server didn't receive full request in time.\n    408, // Too Many Requests: you're getting rate-limited, basically.\n    429];\n    var isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    var isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  };\n\n  return NetworkRequest;\n}();\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\n\n\nvar RequestEndStatus =\n/** @class */\nfunction () {\n  function RequestEndStatus(wasSuccessCode, xhr, canceled) {\n    this.wasSuccessCode = wasSuccessCode;\n    this.xhr = xhr;\n    this.canceled = !!canceled;\n  }\n\n  return RequestEndStatus;\n}();\n\nfunction addAuthHeader_(headers, authToken) {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nfunction addVersionHeader_(headers) {\n  var version = typeof firebase !== 'undefined' ? firebase.SDK_VERSION : 'AppManager';\n  headers['X-Firebase-Storage-Version'] = 'webjs/' + version;\n}\n\nfunction addGmpidHeader_(headers, appId) {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nfunction makeRequest(requestInfo, appId, authToken, pool) {\n  var queryPart = makeQueryString(requestInfo.urlParams);\n  var url = requestInfo.url + queryPart;\n  var headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers);\n  return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, pool);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\n\n\nfunction refFromURL(service, url) {\n  return new Reference(service, url);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\n\n\nfunction refFromPath(ref, path) {\n  if (ref instanceof StorageService) {\n    var service = ref;\n\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n\n    var reference = new Reference(service, service._bucket);\n\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      if (path.includes('..')) {\n        throw invalidArgument('`path` param cannot contain \"..\"');\n      }\n\n      return getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\nfunction ref(serviceOrRef, pathOrUrl) {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof StorageService) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(config) {\n  var bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\n\n  if (bucketString == null) {\n    return null;\n  }\n\n  return Location.makeFromBucketSpec(bucketString);\n}\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n */\n\n\nvar StorageService =\n/** @class */\nfunction () {\n  function StorageService(app,\n  /**\r\n   * @internal\r\n   */\n  _authProvider,\n  /**\r\n   * @internal\r\n   */\n  _pool,\n  /**\r\n   * @internal\r\n   */\n  _url) {\n    this.app = app;\n    this._authProvider = _authProvider;\n    this._pool = _pool;\n    this._url = _url;\n    /**\r\n     * @internal\r\n     */\n\n    this._bucket = null;\n    this._appId = null;\n    this._deleted = false;\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url);\n    } else {\n      this._bucket = extractBucket(this.app.options);\n    }\n  }\n\n  Object.defineProperty(StorageService.prototype, \"maxUploadRetryTime\", {\n    get: function () {\n      return this._maxUploadRetryTime;\n    },\n    set: function (time) {\n      validateNumber('time',\n      /* minValue=*/\n      0,\n      /* maxValue= */\n      Number.POSITIVE_INFINITY, time);\n      this._maxUploadRetryTime = time;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StorageService.prototype, \"maxOperationRetryTime\", {\n    get: function () {\n      return this._maxOperationRetryTime;\n    },\n    set: function (time) {\n      validateNumber('time',\n      /* minValue=*/\n      0,\n      /* maxValue= */\n      Number.POSITIVE_INFINITY, time);\n      this._maxOperationRetryTime = time;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StorageService.prototype.getAuthToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var auth, tokenData;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            auth = this._authProvider.getImmediate({\n              optional: true\n            });\n            if (!auth) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , auth.getToken()];\n\n          case 1:\n            tokenData = _a.sent();\n\n            if (tokenData !== null) {\n              return [2\n              /*return*/\n              , tokenData.accessToken];\n            }\n\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , null];\n        }\n      });\n    });\n  };\n  /**\r\n   * Stop running requests and prevent more from being created.\r\n   * @internal\r\n   */\n\n\n  StorageService.prototype._delete = function () {\n    this._deleted = true;\n\n    this._requests.forEach(function (request) {\n      return request.cancel();\n    });\n\n    this._requests.clear();\n\n    return Promise.resolve();\n  };\n  /**\r\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n   * at the given Location.\r\n   */\n\n\n  StorageService.prototype.makeStorageReference = function (loc) {\n    return new Reference(this, loc);\n  };\n  /**\r\n   * @internal\r\n   * @param requestInfo - HTTP RequestInfo object\r\n   * @param authToken - Firebase auth token\r\n   */\n\n\n  StorageService.prototype.makeRequest = function (requestInfo, authToken) {\n    var _this = this;\n\n    if (!this._deleted) {\n      var request_1 = makeRequest(requestInfo, this._appId, authToken, this._pool);\n\n      this._requests.add(request_1); // Request removes itself from set when complete.\n\n\n      request_1.getPromise().then(function () {\n        return _this._requests.delete(request_1);\n      }, function () {\n        return _this._requests.delete(request_1);\n      });\n      return request_1;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  };\n\n  return StorageService;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A service that provides firebaseStorage.Reference instances.\r\n * @param opt_url gs:// url to a custom Storage Bucket\r\n */\n\n\nvar StorageServiceCompat =\n/** @class */\nfunction () {\n  function StorageServiceCompat(app, _delegate) {\n    var _this = this;\n\n    this.app = app;\n    this._delegate = _delegate;\n    this.INTERNAL = {\n      /**\r\n       * Called when the associated app is deleted.\r\n       */\n      delete: function () {\n        return _this._delegate._delete();\n      }\n    };\n  }\n\n  Object.defineProperty(StorageServiceCompat.prototype, \"maxOperationRetryTime\", {\n    get: function () {\n      return this._delegate.maxOperationRetryTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StorageServiceCompat.prototype, \"maxUploadRetryTime\", {\n    get: function () {\n      return this._delegate.maxUploadRetryTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns a firebaseStorage.Reference for the given path in the default\r\n   * bucket.\r\n   */\n\n  StorageServiceCompat.prototype.ref = function (path) {\n    if (isUrl(path)) {\n      throw invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');\n    }\n\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  };\n  /**\r\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\r\n   * which must be a gs:// or http[s]:// URL.\r\n   */\n\n\n  StorageServiceCompat.prototype.refFromURL = function (url) {\n    if (!isUrl(url)) {\n      throw invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');\n    }\n\n    try {\n      Location.makeFromUrl(url);\n    } catch (e) {\n      throw invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');\n    }\n\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  };\n\n  StorageServiceCompat.prototype.setMaxUploadRetryTime = function (time) {\n    this._delegate.maxUploadRetryTime = time;\n  };\n\n  StorageServiceCompat.prototype.setMaxOperationRetryTime = function (time) {\n    this._delegate.maxOperationRetryTime = time;\n  };\n\n  return StorageServiceCompat;\n}();\n\nvar name = \"@firebase/storage\";\nvar version = \"0.4.2\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Type constant for Firebase Storage.\r\n */\n\nvar STORAGE_TYPE = 'storage';\n\nfunction factory(container, url) {\n  // Dependencies\n  // TODO: This should eventually be 'app-compat'\n  var app = container.getProvider('app').getImmediate();\n  var authProvider = container.getProvider('auth-internal'); // TODO: get StorageService instance from component framework instead\n  // of creating a new one.\n\n  var storageServiceCompat = new StorageServiceCompat(app, new StorageService(app, authProvider, new XhrIoPool(), url));\n  return storageServiceCompat;\n}\n\nfunction registerStorage(instance) {\n  var namespaceExports = {\n    // no-inline\n    TaskState: TaskState,\n    TaskEvent: TaskEvent,\n    StringFormat: StringFormat,\n    Storage: StorageService,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps(namespaceExports).setMultipleInstances(true));\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase);\nexport { registerStorage };","map":{"version":3,"mappings":"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","names":["DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","DEFAULT_MAX_OPERATION_RETRY_TIME","DEFAULT_MAX_UPLOAD_RETRY_TIME","__extends","code","message","_super","prependCode","_this","serverResponse","Object","setPrototypeOf","FirebaseStorageError","prototype","customData","FirebaseError","Code","UNKNOWN","OBJECT_NOT_FOUND","BUCKET_NOT_FOUND","PROJECT_NOT_FOUND","QUOTA_EXCEEDED","UNAUTHENTICATED","UNAUTHORIZED","RETRY_LIMIT_EXCEEDED","INVALID_CHECKSUM","CANCELED","INVALID_EVENT_NAME","INVALID_URL","INVALID_DEFAULT_BUCKET","NO_DEFAULT_BUCKET","CANNOT_SLICE_BLOB","SERVER_FILE_WRONG_SIZE","NO_DOWNLOAD_URL","INVALID_ARGUMENT","INVALID_ARGUMENT_COUNT","APP_DELETED","INVALID_ROOT_OPERATION","INVALID_FORMAT","INTERNAL_ERROR","UNSUPPORTED_ENVIRONMENT","unknown","objectNotFound","path","quotaExceeded","bucket","unauthenticated","unauthorized","retryLimitExceeded","canceled","invalidUrl","url","invalidDefaultBucket","noDefaultBucket","cannotSliceBlob","serverFileWrongSize","noDownloadURL","invalidArgument","appDeleted","invalidRootOperation","name","invalidFormat","format","internalError","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","data","contentType","dataFromString","stringData","StringData","utf8Bytes_","base64Bytes_","dataURLBytes_","dataURLContentType_","value","b","i","length","c","charCodeAt","push","valid","hi","lo","Uint8Array","percentEncodedBytes_","decoded","decodeURIComponent","e","hasMinus","indexOf","hasUnder","invalidChar","hasPlus","hasSlash","replace","bytes","atob","array","dataURL","matches","match","middle","base64","endsWith","substring","rest","dataUrl","parts","DataURLParts","s","end","longEnough","TaskEvent","STATE_CHANGED","InternalTaskState","RUNNING","PAUSING","PAUSED","SUCCESS","CANCELING","ERROR","TaskState","taskStateFromInternalTaskState","state","ErrorCode","xhr_","XMLHttpRequest","errorCode_","NO_ERROR","sendPromise_","Promise","addEventListener","ABORT","resolve","NETWORK_ERROR","NetworkXhrIo","method","body","headers","sent_","open","undefined","key","hasOwnProperty","setRequestHeader","toString","send","status","responseText","abort","header","getResponseHeader","listener","upload","removeEventListener","XhrIoPool","isJustDef","p","isFunction","isNonArrayObject","Array","isArray","isString","String","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","getBlob","args","bb","append","type.isNativeBlobDefined","sliceBlob","blob","start","webkitSlice","mozSlice","slice","elideCopy","size","blobType","type.isNativeBlob","data_","type","ArrayBuffer","byteLength","set","size_","type_","FbsBlob","startByte","endByte","realBlob","sliced","fs.sliceBlob","buffer","blobby","map","val","fs.getBlob","apply","uint8Arrays","type.isString","finalLength_1","forEach","merged_1","index_1","path_","Location","encode","encodeURIComponent","bucketString","bucketLocation","makeFromUrl","location","bucketDomain","gsModify","loc","charAt","gsPath","gsRegex","RegExp","gsIndices","httpModify","version","firebaseStorageHost","firebaseStoragePath","firebaseStorageRegExp","firebaseStorageIndices","cloudStorageHost","cloudStoragePath","cloudStorageRegExp","cloudStorageIndices","groups","regex","indices","postModify","group","captures","exec","bucketValue","pathValue","jsonObjectOrNull","obj","JSON","parse","type.isNonArrayObject","parent","index","lastIndexOf","newPath","child","childPath","canonicalChildPath","split","filter","join","lastComponent","makeUrl","urlPart","makeQueryString","params","queryPart","nextPart","noXform_","metadata","server","local","writable","xform","mappings_","xformPath","fullPath","path.lastComponent","getMappings","mappings","Mapping","mappingsXformPath","_metadata","nameMapping","xformSize","Number","sizeMapping","addRef","service","generateRef","makeStorageReference","defineProperty","get","fromResource","resource","len","mapping","fromResourceString","resourceString","json.jsonObjectOrNull","downloadUrlFromResourceString","tokens","tokensList","urls","token","base","UrlUtils.makeUrl","queryString","UrlUtils.makeQueryString","alt","toResourceString","stringify","PREFIXES_KEY","ITEMS_KEY","fromBackendResponse","listResult","prefixes","items","nextPageToken","_i","pathWithoutTrailingSlash","reference","_b","item","fromResponseString","handler","timeout","handlerCheck","cndn","metadataHandler","xhr","text","MetadataUtils.fromResourceString","listHandler","ListResultUtils.fromResponseString","downloadUrlHandler","MetadataUtils.downloadUrlFromResourceString","sharedErrorHandler","errorHandler","err","newErr","getStatus","objectErrorHandler","shared","getMetadata","fullServerUrl","maxOperationRetryTime","requestInfo","RequestInfo","list","delimiter","pageToken","maxResults","urlParams","isRoot","bucketOnlyServerUrl","getDownloadUrl","updateMetadata","MetadataUtils.toResourceString","deleteObject","_xhr","_text","successCodes","determineContentType_","metadataForUpload_","metadataClone","assign","multipartUpload","genBoundary","str","Math","random","boundary","metadata_","metadataString","preBlobPart","postBlobPart","maxUploadRetryTime","uploadData","current","total","finalized","checkResumeHeader_","allowed","allowedStatus","createResumableUpload","metadataForUpload","getResumableUploadStatus","sizeString","isNaN","ResumableUploadStatus","resumableUploadChunkSize","continueResumableUpload","chunkSize","progressCallback","status_","bytesLeft","bytesToUpload","min","uploadCommand","uploadStatus","newCurrent","nextOrObserver","error","complete","asFunctions","type.isFunction","next","observer","bytesTransferred","totalBytes","task","ref","async","f","argsToForward","then","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","_request","_chunkMultiplier","codeEquals","_needToFetchStatus","completeTransitions_","_error","_transition","_metadataErrorHandler","_promise","reject","_resolve","_reject","_start","UploadTask","sizeBefore","_transferred","_updateProgress","loaded","_uploadUrl","_createResumable","_fetchStatus","_needToFetchMetadata","_fetchMetadata","_continueUpload","_oneShotUpload","callback","storage","getAuthToken","authToken","_resolveToken","fbsRequests.createResumableUpload","_location","createRequest","makeRequest","getPromise","fbsRequests.getResumableUploadStatus","statusRequest","fbsRequests.resumableUploadChunkSize","fbsRequests.ResumableUploadStatus","fbsRequests.continueResumableUpload","_makeProgressCallback","uploadRequest","newStatus","_increaseMultiplier","currentSize","fbsRequests.getMetadata","metadataRequest","fbsRequests.multipartUpload","multipartRequest","transferred","old","_notifyObservers","cancel","wasPaused","externalState","UploadTaskSnapshot","completed","Observer","_addObserver","_removeObserver","onFulfilled","onRejected","_observers","_notifyObserver","splice","_finishPromise","observers","triggered","fbsAsync","bind","snapshot","toCall","_service","Reference","newRef","uploadBytesResumable","_throwIfRoot","uploadString","__assign","listAll","accumulator","listAllHelper","opt","nextPage","_c","_a","options","op","requestsList","requestsGetMetadata","requestsUpdateMetadata","getDownloadURL","requestsGetDownloadUrl","requestsDeleteObject","getChild","_delegate","UploadTaskSnapshotCompat","catch","pause","resume","_snapshot","UploadTaskCompat","wrappedNextOrObserver","taskSnapshot","on","ListResultCompat","ReferenceCompat","root","r","promise_","FailRequest","_appDelete","waitSeconds","timeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","callWithDelay","millis","setTimeout","success","call","__spreadArrays","mustStop","waitMillis","stopped","stop","wasTimeout","clearTimeout","id","additionalRetryCodes","errorCallback","pool","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","progressCallback_","timeout_","pool_","resolve_","reject_","start_","NetworkRequest","self","doTheRequest","backoffCallback","RequestEndStatus","createXhrIo","pendingXhr_","progressListener","progressEvent","lengthComputable","addUploadProgressListener","removeUploadProgressListener","hitServer","getErrorCode","isRetryStatusCode_","wasCanceled","successCode","backoffDone","requestWentThrough","wasSuccessCode","result","getResponseText","type.isJustDef","appDelete_","canceled_","backoffId_","backoff.start","appDelete","backoff.stop","isFiveHundredCode","extraRetryCodes","isExtraRetryCode","isRequestSpecificRetryCode","addAuthHeader_","addVersionHeader_","firebase","SDK_VERSION","addGmpidHeader_","appId","isUrl","test","refFromURL","refFromPath","StorageService","_bucket","includes","serviceOrRef","pathOrUrl","extractBucket","config","constants.CONFIG_STORAGE_BUCKET_KEY","makeFromBucketSpec","app","_authProvider","_pool","_url","_maxOperationRetryTime","constants.DEFAULT_MAX_OPERATION_RETRY_TIME","_maxUploadRetryTime","constants.DEFAULT_MAX_UPLOAD_RETRY_TIME","_requests","Set","time","POSITIVE_INFINITY","auth","getImmediate","optional","getToken","tokenData","accessToken","_deleted","clear","request_1","_appId","add","delete","_delete","StorageServiceCompat","STORAGE_TYPE","factory","container","getProvider","authProvider","storageServiceCompat","registerStorage","instance","namespaceExports","Storage","INTERNAL","registerComponent","Component","setServiceProps","setMultipleInstances","registerVersion"],"sources":["../src/implementation/constants.ts","../src/implementation/error.ts","../src/implementation/string.ts","../src/implementation/taskenums.ts","../src/implementation/xhrio.ts","../src/implementation/xhrio_network.ts","../src/implementation/xhriopool.ts","../src/implementation/type.ts","../src/implementation/fs.ts","../src/implementation/blob.ts","../src/implementation/location.ts","../src/implementation/json.ts","../src/implementation/path.ts","../src/implementation/url.ts","../src/implementation/metadata.ts","../src/implementation/list.ts","../src/implementation/requestinfo.ts","../src/implementation/requests.ts","../src/implementation/observer.ts","../src/tasksnapshot.ts","../src/implementation/async.ts","../src/task.ts","../src/reference.ts","../compat/tasksnapshot.ts","../compat/task.ts","../compat/list.ts","../compat/reference.ts","../src/implementation/failrequest.ts","../src/implementation/backoff.ts","../src/implementation/request.ts","../src/service.ts","../compat/service.ts","../compat/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","import { FirebaseError } from '@firebase/util';\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\nexport class FirebaseStorageError extends FirebaseError {\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  constructor(code: Code, message: string) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    // Without this, `instanceof FirebaseStorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, FirebaseStorageError.prototype);\n  }\n\n  codeEquals(code: Code): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  get message(): string {\n    if (this.customData.serverResponse) {\n      return `${this.message}\\n${this.customData.serverResponse}`;\n    } else {\n      return this.message;\n    }\n  }\n\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n  }\n}\n\nexport const errors = {};\n\nexport type Code = string;\nexport const Code = {\n  // Shared between all platforms\n  UNKNOWN: 'unknown',\n  OBJECT_NOT_FOUND: 'object-not-found',\n  BUCKET_NOT_FOUND: 'bucket-not-found',\n  PROJECT_NOT_FOUND: 'project-not-found',\n  QUOTA_EXCEEDED: 'quota-exceeded',\n  UNAUTHENTICATED: 'unauthenticated',\n  UNAUTHORIZED: 'unauthorized',\n  RETRY_LIMIT_EXCEEDED: 'retry-limit-exceeded',\n  INVALID_CHECKSUM: 'invalid-checksum',\n  CANCELED: 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME: 'invalid-event-name',\n  INVALID_URL: 'invalid-url',\n  INVALID_DEFAULT_BUCKET: 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET: 'no-default-bucket',\n  CANNOT_SLICE_BLOB: 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE: 'server-file-wrong-size',\n  NO_DOWNLOAD_URL: 'no-download-url',\n  INVALID_ARGUMENT: 'invalid-argument',\n  INVALID_ARGUMENT_COUNT: 'invalid-argument-count',\n  APP_DELETED: 'app-deleted',\n  INVALID_ROOT_OPERATION: 'invalid-root-operation',\n  INVALID_FORMAT: 'invalid-format',\n  INTERNAL_ERROR: 'internal-error',\n  UNSUPPORTED_ENVIRONMENT: 'unsupported-environment'\n};\n\nexport function prependCode(code: Code): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): FirebaseStorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new FirebaseStorageError(Code.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): FirebaseStorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new FirebaseStorageError(Code.UNAUTHENTICATED, message);\n}\n\nexport function unauthorized(path: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\nexport function invalidArgument(message: string): FirebaseStorageError {\n  return new FirebaseStorageError(Code.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): FirebaseStorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new FirebaseStorageError(\n    Code.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n */\nexport function invalidRootOperation(name: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(\n  format: string,\n  message: string\n): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): FirebaseStorageError {\n  throw new FirebaseStorageError(\n    Code.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\n\n/**\n * An enumeration of the possible string formats for upload.\n */\nexport type StringFormat = string;\nexport const StringFormat = {\n  RAW: 'raw',\n  BASE64: 'base64',\n  BASE64URL: 'base64url',\n  DATA_URL: 'data_url'\n};\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = atob(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * Enum for task events.\n */\nexport type TaskEvent = string;\nexport const TaskEvent = {\n  /** Triggered whenever the task changes or progress is updated. */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n */\nexport type InternalTaskState = string;\nexport const InternalTaskState = {\n  RUNNING: 'running',\n  PAUSING: 'pausing',\n  PAUSED: 'paused',\n  SUCCESS: 'success',\n  CANCELING: 'canceling',\n  CANCELED: 'canceled',\n  ERROR: 'error'\n};\n\n/**\n * External (API-surfaced) enum for task state.\n */\nexport type TaskState = string;\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n */\n\n/**\n * XHR headers\n */\nexport interface Headers {\n  [name: string]: string | number;\n}\n\nexport interface XhrIo {\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<XhrIo>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponseText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Headers, XhrIo, ErrorCode } from './xhrio';\nimport { internalError } from './error';\n\n/**\n * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and\n * doesn't work in React Native on Android.\n */\nexport class NetworkXhrIo implements XhrIo {\n  private xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<XhrIo>;\n  private sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve(this);\n      });\n    });\n  }\n\n  /**\n   * @override\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<XhrIo> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  /**\n   * @override\n   */\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  /**\n   * @override\n   */\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  /**\n   * @override\n   */\n  getResponseText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponseText() before sending');\n    }\n    return this.xhr_.responseText;\n  }\n\n  /**\n   * Aborts the request.\n   * @override\n   */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  /**\n   * @override\n   */\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  /**\n   * @override\n   */\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  /**\n   * @override\n   */\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Replacement for goog.net.XhrIoPool that works with fbs.XhrIo.\n */\nimport { XhrIo } from './xhrio';\nimport { NetworkXhrIo } from './xhrio_network';\n\n/**\n * Factory-like class for creating XhrIo instances.\n */\nexport class XhrIoPool {\n  createXhrIo(): XhrIo {\n    return new NetworkXhrIo();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirebaseStorageError } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  return typeof Blob !== 'undefined';\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw new FirebaseStorageError(\n      Code.INVALID_ARGUMENT,\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw new FirebaseStorageError(\n      Code.INVALID_ARGUMENT,\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport * as type from './type';\nimport { Code, FirebaseStorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (type.isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new FirebaseStorageError(\n        Code.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport * as fs from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport * as type from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (type.isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (type.isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = fs.sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (type.isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(fs.getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (type.isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = DEFAULT_HOST.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      '(?:storage.googleapis.com|storage.cloud.google.com)';\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as type from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (type.isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { DEFAULT_HOST } from './constants';\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(urlPart: string): string {\n  return `https://${DEFAULT_HOST}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport * as json from './json';\nimport { Location } from './location';\nimport * as path from './path';\nimport * as type from './type';\nimport * as UrlUtils from './url';\nimport { Reference } from '../reference';\nimport { StorageService } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!type.isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return path.lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: StorageService): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service.makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: StorageService,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: StorageService,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = json.jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string\n): string | null {\n  const obj = json.jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!type.isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = UrlUtils.makeUrl(urlPart);\n    const queryString = UrlUtils.makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Metadata,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the listOptions and listResult format\n */\nimport { Location } from './location';\nimport * as json from './json';\nimport { ListResult } from '../list';\nimport { StorageService } from '../service';\n\n/**\n * Represents the simplified object metadata returned by List API.\n * Other fields are filtered because list in Firebase Rules does not grant\n * the permission to read the metadata.\n */\ninterface ListMetadataResponse {\n  name: string;\n  bucket: string;\n}\n\n/**\n * Represents the JSON response of List API.\n */\ninterface ListResultResponse {\n  prefixes: string[];\n  items: ListMetadataResponse[];\n  nextPageToken?: string;\n}\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(\n  service: StorageService,\n  bucket: string,\n  resource: ListResultResponse\n): ListResult {\n  const listResult: ListResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service.makeStorageReference(\n        new Location(bucket, pathWithoutTrailingSlash)\n      );\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service.makeStorageReference(\n        new Location(bucket, item['name'])\n      );\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\n\nexport function fromResponseString(\n  service: StorageService,\n  bucket: string,\n  resourceString: string\n): ListResult | null {\n  const obj = json.jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = (obj as unknown) as ListResultResponse;\n  return fromBackendResponse(service, bucket, resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FirebaseStorageError } from './error';\nimport { Headers, XhrIo } from './xhrio';\n\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\nexport class RequestInfo<T> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n\n  errorHandler:\n    | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n    | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: (p1: XhrIo, p2: string) => T,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  FirebaseStorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown\n} from './error';\nimport { Location } from './location';\nimport * as MetadataUtils from './metadata';\nimport * as ListResultUtils from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport * as type from './type';\nimport * as UrlUtils from './url';\nimport { XhrIo } from './xhrio';\nimport { StorageService } from '../service';\n\n/**\n * Throws the UNKNOWN FirebaseStorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: StorageService,\n  mappings: MetadataUtils.Mappings\n): (p1: XhrIo, p2: string) => Metadata {\n  function handler(xhr: XhrIo, text: string): Metadata {\n    const metadata = MetadataUtils.fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: StorageService,\n  bucket: string\n): (p1: XhrIo, p2: string) => ListResult {\n  function handler(xhr: XhrIo, text: string): ListResult {\n    const listResult = ListResultUtils.fromResponseString(\n      service,\n      bucket,\n      text\n    );\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: StorageService,\n  mappings: MetadataUtils.Mappings\n): (p1: XhrIo, p2: string) => string | null {\n  function handler(xhr: XhrIo, text: string): string | null {\n    const metadata = MetadataUtils.fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return MetadataUtils.downloadUrlFromResourceString(\n      metadata as Metadata,\n      text\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError {\n  function errorHandler(\n    xhr: XhrIo,\n    err: FirebaseStorageError\n  ): FirebaseStorageError {\n    let newErr;\n    if (xhr.getStatus() === 401) {\n      newErr = unauthenticated();\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: XhrIo,\n    err: FirebaseStorageError\n  ): FirebaseStorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: StorageService,\n  location: Location,\n  mappings: MetadataUtils.Mappings\n): RequestInfo<Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: StorageService,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: StorageService,\n  location: Location,\n  mappings: MetadataUtils.Mappings\n): RequestInfo<string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: StorageService,\n  location: Location,\n  metadata: Metadata,\n  mappings: MetadataUtils.Mappings\n): RequestInfo<Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'PATCH';\n  const body = MetadataUtils.toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: StorageService,\n  location: Location\n): RequestInfo<void> {\n  const urlPart = location.fullServerUrl();\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: XhrIo, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\nexport function multipartUpload(\n  service: StorageService,\n  location: Location,\n  mappings: MetadataUtils.Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = MetadataUtils.toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(xhr: XhrIo, allowed?: string[]): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: StorageService,\n  location: Location,\n  mappings: MetadataUtils.Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': blob.size(),\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = MetadataUtils.toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: XhrIo): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(type.isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: StorageService,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: XhrIo): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const resumableUploadChunkSize: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: StorageService,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: MetadataUtils.Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  const uploadCommand =\n    bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': status_.current\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(xhr: XhrIo, text: string): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as type from './type';\nimport { FirebaseStorageError } from './error';\n\nexport type NextFn<T> = (value: T) => void;\nexport type ErrorFn = (error: FirebaseStorageError) => void;\nexport type CompleteFn = () => void;\nexport type Unsubscribe = () => void;\n\nexport interface StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n}\n\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport class Observer<T> implements StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n\n  constructor(\n    nextOrObserver?: NextFn<T> | StorageObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ) {\n    const asFunctions =\n      type.isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T>;\n      this.error = error;\n      this.complete = complete;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T>;\n        error?: ErrorFn;\n        complete?: CompleteFn;\n      };\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TaskState } from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport { Reference } from './reference';\nimport { UploadTask } from './task';\n\nexport class UploadTaskSnapshot {\n  constructor(\n    readonly bytesTransferred: number,\n    readonly totalBytes: number,\n    readonly state: TaskState,\n    readonly metadata: Metadata,\n    readonly task: UploadTask,\n    readonly ref: Reference\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(f: Function): Function {\n  return (...argsToForward: unknown[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport { canceled, Code, FirebaseStorageError } from './implementation/error';\nimport {\n  InternalTaskState,\n  TaskEvent,\n  TaskState,\n  taskStateFromInternalTaskState\n} from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport {\n  CompleteFn,\n  ErrorFn,\n  Observer,\n  StorageObserver,\n  Subscribe,\n  Unsubscribe\n} from './implementation/observer';\nimport { Request } from './implementation/request';\nimport { UploadTaskSnapshot } from './tasksnapshot';\nimport { async as fbsAsync } from './implementation/async';\nimport * as fbsMetadata from './implementation/metadata';\nimport * as fbsRequests from './implementation/requests';\nimport { Reference } from './reference';\nimport { getMappings } from './implementation/metadata';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n */\nexport class UploadTask {\n  private _ref: Reference;\n  /**\n   * @internal\n   */\n  _blob: FbsBlob;\n  /**\n   * @internal\n   */\n  _metadata: Metadata | null;\n  private _mappings: fbsMetadata.Mappings;\n  /**\n   * @internal\n   */\n  _transferred: number = 0;\n  private _needToFetchStatus: boolean = false;\n  private _needToFetchMetadata: boolean = false;\n  private _observers: Array<StorageObserver<UploadTaskSnapshot>> = [];\n  private _resumable: boolean;\n  /**\n   * @internal\n   */\n  _state: InternalTaskState;\n  private _error?: FirebaseStorageError = undefined;\n  private _uploadUrl?: string = undefined;\n  private _request?: Request<unknown> = undefined;\n  private _chunkMultiplier: number = 1;\n  private _errorHandler: (p1: FirebaseStorageError) => void;\n  private _metadataErrorHandler: (p1: FirebaseStorageError) => void;\n  private _resolve?: (p1: UploadTaskSnapshot) => void = undefined;\n  private _reject?: (p1: FirebaseStorageError) => void = undefined;\n  private _promise: Promise<UploadTaskSnapshot>;\n\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref: Reference, blob: FbsBlob, metadata: Metadata | null = null) {\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error.codeEquals(Code.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error.codeEquals(Code.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n\n  private _makeProgressCallback(): (p1: number, p2: number) => void {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  private _shouldDoResumable(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private _start(): void {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  private _resolveToken(callback: (p1: string | null) => void): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this._ref.storage.getAuthToken().then(authToken => {\n      switch (this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this._transition(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private _createResumable(): void {\n    this._resolveToken(authToken => {\n      const requestInfo = fbsRequests.createResumableUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const createRequest = this._ref.storage.makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = createRequest;\n      createRequest.getPromise().then((url: string) => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _fetchStatus(): void {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken(authToken => {\n      const requestInfo = fbsRequests.getResumableUploadStatus(\n        this._ref.storage,\n        this._ref._location,\n        url,\n        this._blob\n      );\n      const statusRequest = this._ref.storage.makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status as fbsRequests.ResumableUploadStatus;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _continueUpload(): void {\n    const chunkSize =\n      fbsRequests.resumableUploadChunkSize * this._chunkMultiplier;\n    const status = new fbsRequests.ResumableUploadStatus(\n      this._transferred,\n      this._blob.size()\n    );\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken(authToken => {\n      let requestInfo;\n      try {\n        requestInfo = fbsRequests.continueResumableUpload(\n          this._ref._location,\n          this._ref.storage,\n          url,\n          this._blob,\n          chunkSize,\n          this._mappings,\n          status,\n          this._makeProgressCallback()\n        );\n      } catch (e) {\n        this._error = e;\n        this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this._ref.storage.makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = uploadRequest;\n      uploadRequest\n        .getPromise()\n        .then((newStatus: fbsRequests.ResumableUploadStatus) => {\n          this._increaseMultiplier();\n          this._request = undefined;\n          this._updateProgress(newStatus.current);\n          if (newStatus.finalized) {\n            this._metadata = newStatus.metadata;\n            this._transition(InternalTaskState.SUCCESS);\n          } else {\n            this.completeTransitions_();\n          }\n        }, this._errorHandler);\n    });\n  }\n\n  private _increaseMultiplier(): void {\n    const currentSize =\n      fbsRequests.resumableUploadChunkSize * this._chunkMultiplier;\n\n    // Max chunk size is 32M.\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  private _fetchMetadata(): void {\n    this._resolveToken(authToken => {\n      const requestInfo = fbsRequests.getMetadata(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings\n      );\n      const metadataRequest = this._ref.storage.makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  private _oneShotUpload(): void {\n    this._resolveToken(authToken => {\n      const requestInfo = fbsRequests.multipartUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const multipartRequest = this._ref.storage.makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._errorHandler);\n    });\n  }\n\n  private _updateProgress(transferred: number): void {\n    const old = this._transferred;\n    this._transferred = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  private _transition(state: InternalTaskState): void {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      default: // Ignore\n    }\n  }\n\n  private completeTransitions_(): void {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  get snapshot(): UploadTaskSnapshot {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return new UploadTaskSnapshot(\n      this._transferred,\n      this._blob.size(),\n      externalState,\n      this._metadata!,\n      this,\n      this._ref\n    );\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   */\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | StorageObserver<UploadTaskSnapshot>\n      | ((a: UploadTaskSnapshot) => unknown),\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    const observer = new Observer(nextOrObserver, error, completed);\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then<U>(\n    onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null,\n    onRejected?: ((error: FirebaseStorageError) => U | Promise<U>) | null\n  ): Promise<U> {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then<U>(\n      onFulfilled as (value: UploadTaskSnapshot) => U | Promise<U>,\n      onRejected as ((error: unknown) => Promise<never>) | null\n    );\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(\n    onRejected: (p1: FirebaseStorageError) => T | Promise<T>\n  ): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private _addObserver(observer: Observer<UploadTaskSnapshot>): void {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private _removeObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  private _notifyObservers(): void {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  private _finishPromise(): void {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject as (p1: FirebaseStorageError) => void;\n          fbsAsync(toCall.bind(null, this._error as FirebaseStorageError))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  private _notifyObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as FirebaseStorageError)\n          )();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as FirebaseStorageError)\n          )();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    const valid =\n      this._state === InternalTaskState.PAUSED ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    const valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    const valid =\n      this._state === InternalTaskState.RUNNING ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase Storage Reference class.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, parent, lastComponent } from './implementation/path';\nimport {\n  list as requestsList,\n  getMetadata as requestsGetMetadata,\n  updateMetadata as requestsUpdateMetadata,\n  getDownloadUrl as requestsGetDownloadUrl,\n  deleteObject as requestsDeleteObject\n} from './implementation/requests';\nimport { StringFormat, dataFromString } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { StorageService } from './service';\nimport { ListOptions, ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @param location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  /**\n   * @internal\n   */\n  _location: Location;\n\n  constructor(private _service: StorageService, location: string | Location) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location);\n    }\n  }\n\n  /**\n   * @returns The URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected newRef(service: StorageService, location: Location): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * @returns An reference to the root of this\n   *     object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this.newRef(this._service, location);\n  }\n\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  get storage(): StorageService {\n    return this._service;\n  }\n\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Uploads a blob to this object's location.\n * @public\n * @param ref - Storage Reference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns An UploadTask that lets you control and\n *     observe the upload.\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata: Metadata | null = null\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * @public\n * @param ref - Storage Reference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded object.\n * @returns An UploadTask that lets you control and\n *     observe the upload.\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('putString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return new UploadTask(ref, new FbsBlob(data.data, true), metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - Storage Reference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @internal\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - Storage Reference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport async function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const authToken = await ref.storage.getAuthToken();\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return ref.storage.makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * A promise that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - Storage Reference to get metadata from.\n */\nexport async function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const authToken = await ref.storage.getAuthToken();\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage.makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - Storage Reference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A promise that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport async function updateMetadata(\n  ref: Reference,\n  metadata: Metadata\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const authToken = await ref.storage.getAuthToken();\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return ref.storage.makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A promise that resolves with the download\n *     URL for this object.\n */\nexport async function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const authToken = await ref.storage.getAuthToken();\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage\n    .makeRequest(requestInfo, authToken)\n    .getPromise()\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - Storage Reference for object to delete.\n * @returns A promise that resolves if the deletion succeeds.\n */\nexport async function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const authToken = await ref.storage.getAuthToken();\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return ref.storage.makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n * @internal\n *\n * @param ref - Storage Reference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n */\nexport function getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { ReferenceCompat } from './reference';\nimport { UploadTaskCompat } from './task';\nimport { UploadTaskSnapshot } from '../src/tasksnapshot';\nimport { Metadata } from '../src/metadata';\n\nexport class UploadTaskSnapshotCompat implements types.UploadTaskSnapshot {\n  constructor(\n    readonly _delegate: UploadTaskSnapshot,\n    readonly task: UploadTaskCompat,\n    readonly ref: ReferenceCompat\n  ) {}\n\n  get bytesTransferred(): number {\n    return this._delegate.bytesTransferred;\n  }\n  get metadata(): Metadata {\n    return this._delegate.metadata;\n  }\n  get state(): string {\n    return this._delegate.state;\n  }\n  get totalBytes(): number {\n    return this._delegate.totalBytes;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UploadTask } from '../src/task';\nimport { UploadTaskSnapshotCompat } from './tasksnapshot';\nimport { TaskEvent } from '../src/implementation/taskenums';\nimport * as types from '@firebase/storage-types';\nimport {\n  StorageObserver,\n  ErrorFn,\n  CompleteFn,\n  Subscribe,\n  Unsubscribe\n} from '../src/implementation/observer';\nimport { UploadTaskSnapshot } from '../src/tasksnapshot';\nimport { ReferenceCompat } from './reference';\nimport { FirebaseStorageError } from '../src/implementation/error';\n\nexport class UploadTaskCompat implements types.UploadTask {\n  private readonly _snapshot: UploadTaskSnapshotCompat;\n  constructor(\n    private readonly _delegate: UploadTask,\n    private readonly _ref: ReferenceCompat\n  ) {\n    this._snapshot = new UploadTaskSnapshotCompat(\n      this._delegate.snapshot,\n      this,\n      this._ref\n    );\n  }\n\n  get snapshot(): UploadTaskSnapshotCompat {\n    return this._snapshot;\n  }\n\n  cancel = this._delegate.cancel.bind(this._delegate);\n  catch = this._delegate.catch.bind(this._delegate);\n  pause = this._delegate.pause.bind(this._delegate);\n  resume = this._delegate.resume.bind(this._delegate);\n\n  then(\n    onFulfilled?: ((a: UploadTaskSnapshotCompat) => unknown) | null,\n    onRejected?: ((a: FirebaseStorageError) => unknown) | null\n  ): Promise<unknown> {\n    return this._delegate.then(snapshot => {\n      if (onFulfilled) {\n        return onFulfilled(\n          new UploadTaskSnapshotCompat(snapshot, this, this._ref)\n        );\n      }\n    }, onRejected);\n  }\n\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | types.StorageObserver<UploadTaskSnapshotCompat>\n      | null\n      | ((a: UploadTaskSnapshotCompat) => unknown),\n    error?: ErrorFn | null,\n    completed?: CompleteFn | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshotCompat> {\n    let wrappedNextOrObserver:\n      | StorageObserver<UploadTaskSnapshot>\n      | undefined\n      | ((a: UploadTaskSnapshot) => unknown) = undefined;\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = (taskSnapshot: UploadTaskSnapshot) =>\n          nextOrObserver(\n            new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n          );\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next\n            ? (taskSnapshot: UploadTaskSnapshot) =>\n                nextOrObserver.next!(\n                  new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n                )\n            : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n    return this._delegate.on(\n      type,\n      wrappedNextOrObserver,\n      error || undefined,\n      completed || undefined\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { ListResult } from '../src/list';\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\n\nexport class ListResultCompat implements types.ListResult {\n  constructor(\n    private readonly _delegate: ListResult,\n    private readonly _service: StorageServiceCompat\n  ) {}\n\n  get prefixes(): ReferenceCompat[] {\n    return this._delegate.prefixes.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get items(): ReferenceCompat[] {\n    return this._delegate.items.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get nextPageToken(): string | null {\n    return this._delegate.nextPageToken || null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Reference,\n  getChild,\n  uploadBytesResumable,\n  uploadString,\n  list,\n  listAll,\n  getDownloadURL,\n  getMetadata,\n  updateMetadata,\n  deleteObject\n} from '../src/reference';\nimport * as types from '@firebase/storage-types';\nimport { Metadata } from '../src/metadata';\nimport { StringFormat } from '../src/implementation/string';\nimport { ListOptions } from '../src/list';\nimport { UploadTaskCompat } from './task';\nimport { ListResultCompat } from './list';\nimport { StorageServiceCompat } from './service';\nimport { invalidRootOperation } from '../src/implementation/error';\n\nexport class ReferenceCompat implements types.Reference {\n  constructor(\n    private readonly _delegate: Reference,\n    public storage: StorageServiceCompat\n  ) {}\n\n  get name(): string {\n    return this._delegate.name;\n  }\n\n  get bucket(): string {\n    return this._delegate.bucket;\n  }\n\n  get fullPath(): string {\n    return this._delegate.fullPath;\n  }\n\n  toString(): string {\n    return this._delegate.toString();\n  }\n\n  /**\n   * @returns A reference to the object obtained by\n   * appending childPath, removing any duplicate, beginning, or trailing\n   * slashes.\n   */\n  child(childPath: string): types.Reference {\n    const reference = getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  get root(): types.Reference {\n    return new ReferenceCompat(this._delegate.root, this.storage);\n  }\n\n  /**\n   * @returns A reference to the parent of the\n   * current object, or null if the current object is the root.\n   */\n  get parent(): types.Reference | null {\n    const reference = this._delegate.parent;\n    if (reference == null) {\n      return null;\n    }\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  /**\n   * Uploads a blob to this object's location.\n   * @param data - The blob to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  put(\n    data: Blob | Uint8Array | ArrayBuffer,\n    metadata?: Metadata\n  ): types.UploadTask {\n    this._throwIfRoot('put');\n    return new UploadTaskCompat(\n      uploadBytesResumable(this._delegate, data, metadata),\n      this\n    );\n  }\n\n  /**\n   * Uploads a string to this object's location.\n   * @param value - The string to upload.\n   * @param format - The format of the string to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  putString(\n    value: string,\n    format: StringFormat = StringFormat.RAW,\n    metadata?: Metadata\n  ): types.UploadTask {\n    this._throwIfRoot('putString');\n    return new UploadTaskCompat(\n      uploadString(this._delegate, value, format, metadata),\n      this\n    );\n  }\n\n  /**\n   * List all items (files) and prefixes (folders) under this storage reference.\n   *\n   * This is a helper method for calling list() repeatedly until there are\n   * no more results. The default pagination size is 1000.\n   *\n   * Note: The results may not be consistent if objects are changed while this\n   * operation is running.\n   *\n   * Warning: listAll may potentially consume too many resources if there are\n   * too many results.\n   *\n   * @returns A Promise that resolves with all the items and prefixes under\n   *  the current storage reference. `prefixes` contains references to\n   *  sub-directories and `items` contains references to objects in this\n   *  folder. `nextPageToken` is never returned.\n   */\n  listAll(): Promise<types.ListResult> {\n    return listAll(this._delegate).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * List items (files) and prefixes (folders) under this storage reference.\n   *\n   * List API is only available for Firebase Rules Version 2.\n   *\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\n   *\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n   * support objects whose paths end with \"/\" or contain two consecutive\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n   * list() may fail if there are too many unsupported objects in the bucket.\n   *\n   * @param options - See ListOptions for details.\n   * @returns A Promise that resolves with the items and prefixes.\n   * `prefixes` contains references to sub-folders and `items`\n   * contains references to objects in this folder. `nextPageToken`\n   * can be used to get the rest of the results.\n   */\n  list(options?: ListOptions | null): Promise<types.ListResult> {\n    return list(this._delegate, options).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * A promise that resolves with the metadata for this object. If this\n   * object doesn't exist or metadata cannot be retreived, the promise is\n   * rejected.\n   */\n  getMetadata(): Promise<Metadata> {\n    return getMetadata(this._delegate);\n  }\n\n  /**\n   * Updates the metadata for this object.\n   * @param metadata - The new metadata for the object.\n   * Only values that have been explicitly set will be changed. Explicitly\n   * setting a value to null will remove the metadata.\n   * @returns A promise that resolves\n   * with the new metadata for this object.\n   * @see firebaseStorage.Reference.prototype.getMetadata\n   */\n  updateMetadata(metadata: Metadata): Promise<Metadata> {\n    return updateMetadata(this._delegate, metadata);\n  }\n\n  /**\n   * @returns A promise that resolves with the download\n   * URL for this object.\n   */\n  getDownloadURL(): Promise<string> {\n    return getDownloadURL(this._delegate);\n  }\n\n  /**\n   * Deletes the object at this location.\n   * @returns A promise that resolves if the deletion succeeds.\n   */\n  delete(): Promise<void> {\n    this._throwIfRoot('delete');\n    return deleteObject(this._delegate);\n  }\n\n  private _throwIfRoot(name: string): void {\n    if (this._delegate._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FirebaseStorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: FirebaseStorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * @param f May be invoked\n *     before the function returns.\n * @param callback Get all the arguments passed to the function\n *     passed to f, including the initial boolean.\n */\nexport function start(\n  f: (p1: (success: boolean) => void, canceled: boolean) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callback: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let timeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    timeoutId = setTimeout(() => {\n      timeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function handler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      return;\n    }\n    if (success) {\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    if (triggeredCallback) {\n      return;\n    }\n    if (timeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(timeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport firebase from '@firebase/app';\nimport * as backoff from './backoff';\nimport {\n  FirebaseStorageError,\n  unknown,\n  appDeleted,\n  canceled,\n  retryLimitExceeded\n} from './error';\nimport { RequestInfo } from './requestinfo';\nimport * as type from './type';\nimport * as UrlUtils from './url';\nimport { Headers, XhrIo, ErrorCode } from './xhrio';\nimport { XhrIoPool } from './xhriopool';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\nclass NetworkRequest<T> implements Request<T> {\n  private url_: string;\n  private method_: string;\n  private headers_: Headers;\n  private body_: string | Blob | Uint8Array | null;\n  private successCodes_: number[];\n  private additionalRetryCodes_: number[];\n  private pendingXhr_: XhrIo | null = null;\n  private backoffId_: backoff.id | null = null;\n  private resolve_!: (value?: T | PromiseLike<T> | undefined) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private callback_: (p1: XhrIo, p2: string) => T;\n  private errorCallback_:\n    | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n    | null;\n  private progressCallback_: ((p1: number, p2: number) => void) | null;\n  private timeout_: number;\n  private pool_: XhrIoPool;\n  promise_: Promise<T>;\n\n  constructor(\n    url: string,\n    method: string,\n    headers: Headers,\n    body: string | Blob | Uint8Array | null,\n    successCodes: number[],\n    additionalRetryCodes: number[],\n    callback: (p1: XhrIo, p2: string) => T,\n    errorCallback:\n      | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n      | null,\n    timeout: number,\n    progressCallback: ((p1: number, p2: number) => void) | null,\n    pool: XhrIoPool\n  ) {\n    this.url_ = url;\n    this.method_ = method;\n    this.headers_ = headers;\n    this.body_ = body;\n    this.successCodes_ = successCodes.slice();\n    this.additionalRetryCodes_ = additionalRetryCodes.slice();\n    this.callback_ = callback;\n    this.errorCallback_ = errorCallback;\n    this.progressCallback_ = progressCallback;\n    this.timeout_ = timeout;\n    this.pool_ = pool;\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const self = this;\n\n    function doTheRequest(\n      backoffCallback: (p1: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ): void {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const xhr = self.pool_.createXhrIo();\n      self.pendingXhr_ = xhr;\n\n      function progressListener(progressEvent: ProgressEvent): void {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (self.progressCallback_ !== null) {\n          self.progressCallback_(loaded, total);\n        }\n      }\n      if (self.progressCallback_ !== null) {\n        xhr.addUploadProgressListener(progressListener);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      xhr\n        .send(self.url_, self.method_, self.body_, self.headers_)\n        .then((xhr: XhrIo) => {\n          if (self.progressCallback_ !== null) {\n            xhr.removeUploadProgressListener(progressListener);\n          }\n          self.pendingXhr_ = null;\n          xhr = xhr as XhrIo;\n          const hitServer = xhr.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = xhr.getStatus();\n          if (!hitServer || self.isRetryStatusCode_(status)) {\n            const wasCanceled = xhr.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = self.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, xhr));\n        });\n    }\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    function backoffDone(\n      requestWentThrough: boolean,\n      status: RequestEndStatus\n    ): void {\n      const resolve = self.resolve_;\n      const reject = self.reject_;\n      const xhr = status.xhr as XhrIo;\n      if (status.wasSuccessCode) {\n        try {\n          const result = self.callback_(xhr, xhr.getResponseText());\n          if (type.isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (xhr !== null) {\n          const err = unknown();\n          err.serverResponse = xhr.getResponseText();\n          if (self.errorCallback_) {\n            reject(self.errorCallback_(xhr, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = self.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    }\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = backoff.start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      backoff.stop(this.backoffId_);\n    }\n    if (this.pendingXhr_ !== null) {\n      this.pendingXhr_.abort();\n    }\n  }\n\n  private isRetryStatusCode_(status: number): boolean {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    const isFiveHundredCode = status >= 500 && status < 600;\n    const extraRetryCodes = [\n      // Request Timeout: web server didn't receive full request in time.\n      408,\n      // Too Many Requests: you're getting rate-limited, basically.\n      429\n    ];\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    const isRequestSpecificRetryCode =\n      this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public xhr: XhrIo | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(headers: Headers): void {\n  const version =\n    typeof firebase !== 'undefined' ? firebase.SDK_VERSION : 'AppManager';\n  headers['X-Firebase-Storage-Version'] = 'webjs/' + version;\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function makeRequest<T>(\n  requestInfo: RequestInfo<T>,\n  appId: string | null,\n  authToken: string | null,\n  pool: XhrIoPool\n): Request<T> {\n  const queryPart = UrlUtils.makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers);\n  return new NetworkRequest<T>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    pool\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { XhrIoPool } from './implementation/xhriopool';\nimport { Reference, getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  _FirebaseService\n} from '@firebase/app-types-exp';\nimport * as constants from '../src/implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: StorageService, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: StorageService | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof StorageService) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      if (path.includes('..')) {\n        throw invalidArgument('`path` param cannot contain \"..\"');\n      }\n      return getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: StorageService, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: StorageService | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: StorageService | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof StorageService) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(config?: FirebaseOptions): Location | null {\n  const bucketString = config?.[constants.CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString);\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @param opt_url - gs:// url to a custom Storage Bucket\n */\nexport class StorageService implements _FirebaseService {\n  /**\n   * @internal\n   */\n  readonly _bucket: Location | null = null;\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n\n  constructor(\n    readonly app: FirebaseApp,\n    /**\n     * @internal\n     */\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    /**\n     * @internal\n     */\n    readonly _pool: XhrIoPool,\n    /**\n     * @internal\n     */\n    readonly _url?: string\n  ) {\n    this._maxOperationRetryTime = constants.DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = constants.DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url);\n    } else {\n      this._bucket = extractBucket(this.app.options);\n    }\n  }\n\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async getAuthToken(): Promise<string | null> {\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   * @internal\n   */\n  _delete(): Promise<void> {\n    this._deleted = true;\n    this._requests.forEach(request => request.cancel());\n    this._requests.clear();\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @internal\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  makeRequest<T>(\n    requestInfo: RequestInfo<T>,\n    authToken: string | null\n  ): Request<T> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        this._pool\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { StorageService, isUrl, ref } from '../src/service';\nimport { Location } from '../src/implementation/location';\nimport { ReferenceCompat } from './reference';\nimport { invalidArgument } from '../src/implementation/error';\nimport { FirebaseApp } from '@firebase/app-types';\n\n/**\n * A service that provides firebaseStorage.Reference instances.\n * @param opt_url gs:// url to a custom Storage Bucket\n */\nexport class StorageServiceCompat implements types.FirebaseStorage {\n  constructor(public app: FirebaseApp, readonly _delegate: StorageService) {}\n\n  INTERNAL = {\n    /**\n     * Called when the associated app is deleted.\n     */\n    delete: () => {\n      return this._delegate._delete();\n    }\n  };\n\n  get maxOperationRetryTime(): number {\n    return this._delegate.maxOperationRetryTime;\n  }\n\n  get maxUploadRetryTime(): number {\n    return this._delegate.maxUploadRetryTime;\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference for the given path in the default\n   * bucket.\n   */\n  ref(path?: string): types.Reference {\n    if (isUrl(path)) {\n      throw invalidArgument(\n        'ref() expected a child path but got a URL, use refFromURL instead.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\n   * which must be a gs:// or http[s]:// URL.\n   */\n  refFromURL(url: string): types.Reference {\n    if (!isUrl(url)) {\n      throw invalidArgument(\n        'refFromURL() expected a full URL but got a child path, use ref() instead.'\n      );\n    }\n    try {\n      Location.makeFromUrl(url);\n    } catch (e) {\n      throw invalidArgument(\n        'refFromUrl() expected a valid full URL but got an invalid one.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  }\n\n  setMaxUploadRetryTime(time: number): void {\n    this._delegate.maxUploadRetryTime = time;\n  }\n\n  setMaxOperationRetryTime(time: number): void {\n    this._delegate.maxOperationRetryTime = time;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { StringFormat } from '../src/implementation/string';\nimport { TaskEvent, TaskState } from '../src/implementation/taskenums';\n\nimport { XhrIoPool } from '../src/implementation/xhriopool';\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport { StorageService } from '../src/service';\nimport * as types from '@firebase/storage-types';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage';\n\nfunction factory(\n  container: ComponentContainer,\n  url?: string\n): types.FirebaseStorage {\n  // Dependencies\n  // TODO: This should eventually be 'app-compat'\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n\n  // TODO: get StorageService instance from component framework instead\n  // of creating a new one.\n  const storageServiceCompat: StorageServiceCompat = new StorageServiceCompat(\n    app,\n    new StorageService(app, authProvider, new XhrIoPool(), url)\n  );\n  return storageServiceCompat;\n}\n\nexport function registerStorage(instance: _FirebaseNamespace): void {\n  const namespaceExports = {\n    // no-inline\n    TaskState,\n    TaskEvent,\n    StringFormat,\n    Storage: StorageService,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(\n    new Component(STORAGE_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase as _FirebaseNamespace);\n\n/**\n * Define extension behavior for `registerStorage`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    storage?: {\n      (app?: FirebaseApp): types.FirebaseStorage;\n      Storage: typeof types.FirebaseStorage;\n\n      StringFormat: {\n        BASE64: types.StringFormat;\n        BASE64URL: types.StringFormat;\n        DATA_URL: types.StringFormat;\n        RAW: types.StringFormat;\n      };\n      TaskEvent: {\n        STATE_CHANGED: types.TaskEvent;\n      };\n      TaskState: {\n        CANCELED: types.TaskState;\n        ERROR: types.TaskState;\n        PAUSED: types.TaskState;\n        RUNNING: types.TaskState;\n        SUCCESS: types.TaskState;\n      };\n    };\n  }\n  interface FirebaseApp {\n    storage?(storageBucket?: string): types.FirebaseStorage;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}