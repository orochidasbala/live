{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport firebase from '@firebase/app';\nimport { __extends, __awaiter, __generator } from 'tslib';\nimport { Component } from '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Standard error codes for different ways a request can fail, as defined by:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * This map is used primarily to convert from a backend error code string to\r\n * a client SDK error code string, and make sure it's in the supported set.\r\n */\n\nvar errorCodeMap = {\n  OK: 'ok',\n  CANCELLED: 'cancelled',\n  UNKNOWN: 'unknown',\n  INVALID_ARGUMENT: 'invalid-argument',\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  NOT_FOUND: 'not-found',\n  ALREADY_EXISTS: 'already-exists',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  FAILED_PRECONDITION: 'failed-precondition',\n  ABORTED: 'aborted',\n  OUT_OF_RANGE: 'out-of-range',\n  UNIMPLEMENTED: 'unimplemented',\n  INTERNAL: 'internal',\n  UNAVAILABLE: 'unavailable',\n  DATA_LOSS: 'data-loss'\n};\n/**\r\n * An explicit error that can be thrown from a handler to send an error to the\r\n * client that called the function.\r\n */\n\nvar HttpsErrorImpl =\n/** @class */\nfunction (_super) {\n  __extends(HttpsErrorImpl, _super);\n\n  function HttpsErrorImpl(code, message, details) {\n    var _this = _super.call(this, message) || this; // This is a workaround for a bug in TypeScript when extending Error:\n    // tslint:disable-next-line\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n\n\n    Object.setPrototypeOf(_this, HttpsErrorImpl.prototype);\n    _this.code = code;\n    _this.details = details;\n    return _this;\n  }\n\n  return HttpsErrorImpl;\n}(Error);\n/**\r\n * Takes an HTTP status code and returns the corresponding ErrorCode.\r\n * This is the standard HTTP status code -> error mapping defined in:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * @param status An HTTP status code.\r\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\r\n */\n\n\nfunction codeForHTTPStatus(status) {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n\n  switch (status) {\n    case 0:\n      // This can happen if the server returns 500.\n      return 'internal';\n\n    case 400:\n      return 'invalid-argument';\n\n    case 401:\n      return 'unauthenticated';\n\n    case 403:\n      return 'permission-denied';\n\n    case 404:\n      return 'not-found';\n\n    case 409:\n      return 'aborted';\n\n    case 429:\n      return 'resource-exhausted';\n\n    case 499:\n      return 'cancelled';\n\n    case 500:\n      return 'internal';\n\n    case 501:\n      return 'unimplemented';\n\n    case 503:\n      return 'unavailable';\n\n    case 504:\n      return 'deadline-exceeded';\n  }\n\n  return 'unknown';\n}\n/**\r\n * Takes an HTTP response and returns the corresponding Error, if any.\r\n */\n\n\nfunction _errorForResponse(status, bodyJSON, serializer) {\n  var code = codeForHTTPStatus(status); // Start with reasonable defaults from the status code.\n\n  var description = code;\n  var details = undefined; // Then look through the body for explicit details.\n\n  try {\n    var errorJSON = bodyJSON && bodyJSON.error;\n\n    if (errorJSON) {\n      var status_1 = errorJSON.status;\n\n      if (typeof status_1 === 'string') {\n        if (!errorCodeMap[status_1]) {\n          // They must've included an unknown error code in the body.\n          return new HttpsErrorImpl('internal', 'internal');\n        }\n\n        code = errorCodeMap[status_1]; // TODO(klimt): Add better default descriptions for error enums.\n        // The default description needs to be updated for the new code.\n\n        description = status_1;\n      }\n\n      var message = errorJSON.message;\n\n      if (typeof message === 'string') {\n        description = message;\n      }\n\n      details = errorJSON.details;\n\n      if (details !== undefined) {\n        details = serializer.decode(details);\n      }\n    }\n  } catch (e) {// If we couldn't parse explicit error data, that's fine.\n  }\n\n  if (code === 'ok') {\n    // Technically, there's an edge case where a developer could explicitly\n    // return an error code of OK, and we will treat it as success, but that\n    // seems reasonable.\n    return null;\n  }\n\n  return new HttpsErrorImpl(code, description, details);\n}\n/**\r\n * Helper class to get metadata that should be included with a function call.\r\n */\n\n\nvar ContextProvider =\n/** @class */\nfunction () {\n  function ContextProvider(authProvider, messagingProvider) {\n    var _this = this;\n\n    this.auth = null;\n    this.messaging = null;\n    this.auth = authProvider.getImmediate({\n      optional: true\n    });\n    this.messaging = messagingProvider.getImmediate({\n      optional: true\n    });\n\n    if (!this.auth) {\n      authProvider.get().then(function (auth) {\n        return _this.auth = auth;\n      }, function () {\n        /* get() never rejects */\n      });\n    }\n\n    if (!this.messaging) {\n      messagingProvider.get().then(function (messaging) {\n        return _this.messaging = messaging;\n      }, function () {\n        /* get() never rejects */\n      });\n    }\n  }\n\n  ContextProvider.prototype.getAuthToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var token, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.auth) {\n              return [2\n              /*return*/\n              , undefined];\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.auth.getToken()];\n\n          case 2:\n            token = _a.sent();\n\n            if (!token) {\n              return [2\n              /*return*/\n              , undefined];\n            }\n\n            return [2\n            /*return*/\n            , token.accessToken];\n\n          case 3:\n            e_1 = _a.sent(); // If there's any error when trying to get the auth token, leave it off.\n\n            return [2\n            /*return*/\n            , undefined];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  ContextProvider.prototype.getInstanceIdToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (!this.messaging || !('Notification' in self) || Notification.permission !== 'granted') {\n          return [2\n          /*return*/\n          , undefined];\n        }\n\n        try {\n          return [2\n          /*return*/\n          , this.messaging.getToken()];\n        } catch (e) {\n          // We don't warn on this, because it usually means messaging isn't set up.\n          // console.warn('Failed to retrieve instance id token.', e);\n          // If there's any error when trying to get the token, leave it off.\n          return [2\n          /*return*/\n          , undefined];\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  ContextProvider.prototype.getContext = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var authToken, instanceIdToken;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getAuthToken()];\n\n          case 1:\n            authToken = _a.sent();\n            return [4\n            /*yield*/\n            , this.getInstanceIdToken()];\n\n          case 2:\n            instanceIdToken = _a.sent();\n            return [2\n            /*return*/\n            , {\n              authToken: authToken,\n              instanceIdToken: instanceIdToken\n            }];\n        }\n      });\n    });\n  };\n\n  return ContextProvider;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nvar UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\n\nfunction mapValues( // { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\no, f) {\n  var result = {};\n\n  for (var key in o) {\n    if (o.hasOwnProperty(key)) {\n      result[key] = f(o[key]);\n    }\n  }\n\n  return result;\n}\n\nvar Serializer =\n/** @class */\nfunction () {\n  function Serializer() {} // Takes data and encodes it in a JSON-friendly way, such that types such as\n  // Date are preserved.\n\n\n  Serializer.prototype.encode = function (data) {\n    var _this = this;\n\n    if (data == null) {\n      return null;\n    }\n\n    if (data instanceof Number) {\n      data = data.valueOf();\n    }\n\n    if (typeof data === 'number' && isFinite(data)) {\n      // Any number in JS is safe to put directly in JSON and parse as a double\n      // without any loss of precision.\n      return data;\n    }\n\n    if (data === true || data === false) {\n      return data;\n    }\n\n    if (Object.prototype.toString.call(data) === '[object String]') {\n      return data;\n    }\n\n    if (Array.isArray(data)) {\n      return data.map(function (x) {\n        return _this.encode(x);\n      });\n    }\n\n    if (typeof data === 'function' || typeof data === 'object') {\n      return mapValues(data, function (x) {\n        return _this.encode(x);\n      });\n    } // If we got this far, the data is not encodable.\n\n\n    throw new Error('Data cannot be encoded in JSON: ' + data);\n  }; // Takes data that's been encoded in a JSON-friendly form and returns a form\n  // with richer datatypes, such as Dates, etc.\n\n\n  Serializer.prototype.decode = function (json) {\n    var _this = this;\n\n    if (json == null) {\n      return json;\n    }\n\n    if (json['@type']) {\n      switch (json['@type']) {\n        case LONG_TYPE: // Fall through and handle this the same as unsigned.\n\n        case UNSIGNED_LONG_TYPE:\n          {\n            // Technically, this could work return a valid number for malformed\n            // data if there was a number followed by garbage. But it's just not\n            // worth all the extra code to detect that case.\n            var value = Number(json['value']);\n\n            if (isNaN(value)) {\n              throw new Error('Data cannot be decoded from JSON: ' + json);\n            }\n\n            return value;\n          }\n\n        default:\n          {\n            throw new Error('Data cannot be decoded from JSON: ' + json);\n          }\n      }\n    }\n\n    if (Array.isArray(json)) {\n      return json.map(function (x) {\n        return _this.decode(x);\n      });\n    }\n\n    if (typeof json === 'function' || typeof json === 'object') {\n      return mapValues(json, function (x) {\n        return _this.decode(x);\n      });\n    } // Anything else is safe to return.\n\n\n    return json;\n  };\n\n  return Serializer;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a Promise that will be rejected after the given duration.\r\n * The error will be of type HttpsErrorImpl.\r\n *\r\n * @param millis Number of milliseconds to wait before rejecting.\r\n */\n\n\nfunction failAfter(millis) {\n  var timer;\n  var promise = new Promise(function (_, reject) {\n    timer = setTimeout(function () {\n      reject(new HttpsErrorImpl('deadline-exceeded', 'deadline-exceeded'));\n    }, millis);\n  });\n  return {\n    timer: timer,\n    promise: promise\n  };\n}\n/**\r\n * The main class for the Firebase Functions SDK.\r\n */\n\n\nvar Service =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new Functions service for the given app and (optional) region or custom domain.\r\n   * @param app_ The FirebaseApp to use.\r\n   * @param regionOrCustomDomain_ one of:\r\n   *   a) A region to call functions from, such as us-central1\r\n   *   b) A custom domain to use as a functions prefix, such as https://mydomain.com\r\n   */\n  function Service(app_, authProvider, messagingProvider, regionOrCustomDomain_, fetchImpl) {\n    var _this = this;\n\n    if (regionOrCustomDomain_ === void 0) {\n      regionOrCustomDomain_ = 'us-central1';\n    }\n\n    this.app_ = app_;\n    this.fetchImpl = fetchImpl;\n    this.serializer = new Serializer();\n    this.emulatorOrigin = null;\n    this.INTERNAL = {\n      delete: function () {\n        return Promise.resolve(_this.deleteService());\n      }\n    };\n    this.contextProvider = new ContextProvider(authProvider, messagingProvider); // Cancels all ongoing requests when resolved.\n\n    this.cancelAllRequests = new Promise(function (resolve) {\n      _this.deleteService = function () {\n        return resolve();\n      };\n    }); // Resolve the region or custom domain overload by attempting to parse it.\n\n    try {\n      var url = new URL(regionOrCustomDomain_);\n      this.customDomain = url.origin;\n      this.region = 'us-central1';\n    } catch (e) {\n      this.customDomain = null;\n      this.region = regionOrCustomDomain_;\n    }\n  }\n\n  Object.defineProperty(Service.prototype, \"app\", {\n    get: function () {\n      return this.app_;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns the URL for a callable with the given name.\r\n   * @param name The name of the callable.\r\n   */\n\n  Service.prototype._url = function (name) {\n    var projectId = this.app_.options.projectId;\n\n    if (this.emulatorOrigin !== null) {\n      var origin_1 = this.emulatorOrigin;\n      return origin_1 + \"/\" + projectId + \"/\" + this.region + \"/\" + name;\n    }\n\n    if (this.customDomain !== null) {\n      return this.customDomain + \"/\" + name;\n    }\n\n    return \"https://\" + this.region + \"-\" + projectId + \".cloudfunctions.net/\" + name;\n  };\n  /**\r\n   * Modify this instance to communicate with the Cloud Functions emulator.\r\n   *\r\n   * Note: this must be called before this instance has been used to do any operations.\r\n   *\r\n   * @param host The emulator host (ex: localhost)\r\n   * @param port The emulator port (ex: 5001)\r\n   */\n\n\n  Service.prototype.useEmulator = function (host, port) {\n    this.emulatorOrigin = \"http://\" + host + \":\" + port;\n  };\n  /**\r\n   * Changes this instance to point to a Cloud Functions emulator running\r\n   * locally. See https://firebase.google.com/docs/functions/local-emulator\r\n   *\r\n   * @deprecated Prefer the useEmulator(host, port) method.\r\n   * @param origin The origin of the local emulator, such as\r\n   * \"http://localhost:5005\".\r\n   */\n\n\n  Service.prototype.useFunctionsEmulator = function (origin) {\n    this.emulatorOrigin = origin;\n  };\n  /**\r\n   * Returns a reference to the callable https trigger with the given name.\r\n   * @param name The name of the trigger.\r\n   */\n\n\n  Service.prototype.httpsCallable = function (name, options) {\n    var _this = this;\n\n    return function (data) {\n      return _this.call(name, data, options || {});\n    };\n  };\n  /**\r\n   * Does an HTTP POST and returns the completed response.\r\n   * @param url The url to post to.\r\n   * @param body The JSON body of the post.\r\n   * @param headers The HTTP headers to include in the request.\r\n   * @return A Promise that will succeed when the request finishes.\r\n   */\n\n\n  Service.prototype.postJSON = function (url, body, headers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var response, e_1, json, e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            headers['Content-Type'] = 'application/json';\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.fetchImpl(url, {\n              method: 'POST',\n              body: JSON.stringify(body),\n              headers: headers\n            })];\n\n          case 2:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_1 = _a.sent(); // This could be an unhandled error on the backend, or it could be a\n            // network error. There's no way to know, since an unhandled error on the\n            // backend will fail to set the proper CORS header, and thus will be\n            // treated as a network error by fetch.\n\n            return [2\n            /*return*/\n            , {\n              status: 0,\n              json: null\n            }];\n\n          case 4:\n            json = null;\n            _a.label = 5;\n\n          case 5:\n            _a.trys.push([5, 7,, 8]);\n\n            return [4\n            /*yield*/\n            , response.json()];\n\n          case 6:\n            json = _a.sent();\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            e_2 = _a.sent();\n            return [3\n            /*break*/\n            , 8];\n\n          case 8:\n            return [2\n            /*return*/\n            , {\n              status: response.status,\n              json: json\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * Calls a callable function asynchronously and returns the result.\r\n   * @param name The name of the callable trigger.\r\n   * @param data The data to pass as params to the function.s\r\n   */\n\n\n  Service.prototype.call = function (name, data, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var url, body, headers, context, timeout, _a, timer, failAfterPromise, response, error, responseData, decodedData;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            url = this._url(name); // Encode any special types, such as dates, in the input data.\n\n            data = this.serializer.encode(data);\n            body = {\n              data: data\n            };\n            headers = {};\n            return [4\n            /*yield*/\n            , this.contextProvider.getContext()];\n\n          case 1:\n            context = _b.sent();\n\n            if (context.authToken) {\n              headers['Authorization'] = 'Bearer ' + context.authToken;\n            }\n\n            if (context.instanceIdToken) {\n              headers['Firebase-Instance-ID-Token'] = context.instanceIdToken;\n            }\n\n            timeout = options.timeout || 70000;\n            _a = failAfter(timeout), timer = _a.timer, failAfterPromise = _a.promise;\n            return [4\n            /*yield*/\n            , Promise.race([clearTimeoutWrapper(timer, this.postJSON(url, body, headers)), failAfterPromise, clearTimeoutWrapper(timer, this.cancelAllRequests)])];\n\n          case 2:\n            response = _b.sent(); // If service was deleted, interrupted response throws an error.\n\n            if (!response) {\n              throw new HttpsErrorImpl('cancelled', 'Firebase Functions instance was deleted.');\n            }\n\n            error = _errorForResponse(response.status, response.json, this.serializer);\n\n            if (error) {\n              throw error;\n            }\n\n            if (!response.json) {\n              throw new HttpsErrorImpl('internal', 'Response is not valid JSON object.');\n            }\n\n            responseData = response.json.data; // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\n            // backwards compatibility.\n\n            if (typeof responseData === 'undefined') {\n              responseData = response.json.result;\n            }\n\n            if (typeof responseData === 'undefined') {\n              // Consider the response malformed.\n              throw new HttpsErrorImpl('internal', 'Response is missing data field.');\n            }\n\n            decodedData = this.serializer.decode(responseData);\n            return [2\n            /*return*/\n            , {\n              data: decodedData\n            }];\n        }\n      });\n    });\n  };\n\n  return Service;\n}();\n\nfunction clearTimeoutWrapper(timer, promise) {\n  return __awaiter(this, void 0, void 0, function () {\n    var result;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , promise];\n\n        case 1:\n          result = _a.sent(); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n          clearTimeout(timer);\n          return [2\n          /*return*/\n          , result];\n      }\n    });\n  });\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Type constant for Firebase Functions.\r\n */\n\n\nvar FUNCTIONS_TYPE = 'functions';\n\nfunction registerFunctions(instance, fetchImpl) {\n  var namespaceExports = {\n    // no-inline\n    Functions: Service\n  };\n\n  function factory(container, regionOrCustomDomain) {\n    // Dependencies\n    var app = container.getProvider('app').getImmediate();\n    var authProvider = container.getProvider('auth-internal');\n    var messagingProvider = container.getProvider('messaging'); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    return new Service(app, authProvider, messagingProvider, regionOrCustomDomain, fetchImpl);\n  }\n\n  instance.INTERNAL.registerComponent(new Component(FUNCTIONS_TYPE, factory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps(namespaceExports).setMultipleInstances(true));\n}\n\nvar name = \"@firebase/functions\";\nvar version = \"0.6.1\";\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nregisterFunctions(firebase, fetch.bind(self));\nfirebase.registerVersion(name, version);","map":{"version":3,"mappings":"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","names":["errorCodeMap","OK","CANCELLED","UNKNOWN","INVALID_ARGUMENT","DEADLINE_EXCEEDED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","UNAUTHENTICATED","RESOURCE_EXHAUSTED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","UNIMPLEMENTED","INTERNAL","UNAVAILABLE","DATA_LOSS","__extends","code","message","details","_super","Object","setPrototypeOf","_this","HttpsErrorImpl","prototype","Error","codeForHTTPStatus","status","_errorForResponse","bodyJSON","serializer","description","undefined","errorJSON","error","status_1","decode","e","authProvider","messagingProvider","auth","getImmediate","optional","messaging","get","then","ContextProvider","getToken","token","_a","accessToken","self","Notification","permission","getAuthToken","authToken","getInstanceIdToken","instanceIdToken","LONG_TYPE","UNSIGNED_LONG_TYPE","mapValues","o","f","result","key","hasOwnProperty","Serializer","data","Number","valueOf","isFinite","toString","call","Array","isArray","map","encode","x","json","value","isNaN","failAfter","millis","timer","promise","Promise","_","reject","setTimeout","app_","regionOrCustomDomain_","fetchImpl","delete","resolve","deleteService","contextProvider","cancelAllRequests","url","URL","customDomain","origin","region","Service","name","projectId","options","emulatorOrigin","origin_1","host","port","body","headers","method","JSON","stringify","response","_url","getContext","context","_b","timeout","failAfterPromise","race","clearTimeoutWrapper","postJSON","responseData","decodedData","clearTimeout","FUNCTIONS_TYPE","registerFunctions","instance","namespaceExports","Functions","factory","container","regionOrCustomDomain","app","getProvider","registerComponent","Component","setServiceProps","setMultipleInstances","firebase","fetch","bind","registerVersion","version"],"sources":["../src/api/error.ts","../src/context.ts","../src/serializer.ts","../src/api/service.ts","../src/config.ts","../index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HttpsError, FunctionsErrorCode } from '@firebase/functions-types';\nimport { Serializer } from '../serializer';\nimport { HttpResponseBody } from './service';\n\n/**\n * Standard error codes for different ways a request can fail, as defined by:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * This map is used primarily to convert from a backend error code string to\n * a client SDK error code string, and make sure it's in the supported set.\n */\nconst errorCodeMap: { [name: string]: FunctionsErrorCode } = {\n  OK: 'ok',\n  CANCELLED: 'cancelled',\n  UNKNOWN: 'unknown',\n  INVALID_ARGUMENT: 'invalid-argument',\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  NOT_FOUND: 'not-found',\n  ALREADY_EXISTS: 'already-exists',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  FAILED_PRECONDITION: 'failed-precondition',\n  ABORTED: 'aborted',\n  OUT_OF_RANGE: 'out-of-range',\n  UNIMPLEMENTED: 'unimplemented',\n  INTERNAL: 'internal',\n  UNAVAILABLE: 'unavailable',\n  DATA_LOSS: 'data-loss'\n};\n\n/**\n * An explicit error that can be thrown from a handler to send an error to the\n * client that called the function.\n */\nexport class HttpsErrorImpl extends Error implements HttpsError {\n  /**\n   * A standard error code that will be returned to the client. This also\n   * determines the HTTP status code of the response, as defined in code.proto.\n   */\n  readonly code: FunctionsErrorCode;\n\n  /**\n   * Extra data to be converted to JSON and included in the error response.\n   */\n  readonly details?: unknown;\n\n  constructor(code: FunctionsErrorCode, message?: string, details?: unknown) {\n    super(message);\n\n    // This is a workaround for a bug in TypeScript when extending Error:\n    // tslint:disable-next-line\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, HttpsErrorImpl.prototype);\n\n    this.code = code;\n    this.details = details;\n  }\n}\n\n/**\n * Takes an HTTP status code and returns the corresponding ErrorCode.\n * This is the standard HTTP status code -> error mapping defined in:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * @param status An HTTP status code.\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\n */\nfunction codeForHTTPStatus(status: number): FunctionsErrorCode {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n  switch (status) {\n    case 0:\n      // This can happen if the server returns 500.\n      return 'internal';\n    case 400:\n      return 'invalid-argument';\n    case 401:\n      return 'unauthenticated';\n    case 403:\n      return 'permission-denied';\n    case 404:\n      return 'not-found';\n    case 409:\n      return 'aborted';\n    case 429:\n      return 'resource-exhausted';\n    case 499:\n      return 'cancelled';\n    case 500:\n      return 'internal';\n    case 501:\n      return 'unimplemented';\n    case 503:\n      return 'unavailable';\n    case 504:\n      return 'deadline-exceeded';\n    default: // ignore\n  }\n  return 'unknown';\n}\n\n/**\n * Takes an HTTP response and returns the corresponding Error, if any.\n */\nexport function _errorForResponse(\n  status: number,\n  bodyJSON: HttpResponseBody | null,\n  serializer: Serializer\n): Error | null {\n  let code = codeForHTTPStatus(status);\n\n  // Start with reasonable defaults from the status code.\n  let description: string = code;\n\n  let details: unknown = undefined;\n\n  // Then look through the body for explicit details.\n  try {\n    const errorJSON = bodyJSON && bodyJSON.error;\n    if (errorJSON) {\n      const status = errorJSON.status;\n      if (typeof status === 'string') {\n        if (!errorCodeMap[status]) {\n          // They must've included an unknown error code in the body.\n          return new HttpsErrorImpl('internal', 'internal');\n        }\n        code = errorCodeMap[status];\n\n        // TODO(klimt): Add better default descriptions for error enums.\n        // The default description needs to be updated for the new code.\n        description = status;\n      }\n\n      const message = errorJSON.message;\n      if (typeof message === 'string') {\n        description = message;\n      }\n\n      details = errorJSON.details;\n      if (details !== undefined) {\n        details = serializer.decode(details);\n      }\n    }\n  } catch (e) {\n    // If we couldn't parse explicit error data, that's fine.\n  }\n\n  if (code === 'ok') {\n    // Technically, there's an edge case where a developer could explicitly\n    // return an error code of OK, and we will treat it as success, but that\n    // seems reasonable.\n    return null;\n  }\n\n  return new HttpsErrorImpl(code, description, details);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _FirebaseApp } from '@firebase/app-types/private';\nimport {\n  FirebaseMessaging,\n  FirebaseMessagingName\n} from '@firebase/messaging-types';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\n/**\n * The metadata that should be supplied with function calls.\n */\nexport interface Context {\n  authToken?: string;\n  instanceIdToken?: string;\n}\n\n/**\n * Helper class to get metadata that should be included with a function call.\n */\nexport class ContextProvider {\n  private auth: FirebaseAuthInternal | null = null;\n  private messaging: FirebaseMessaging | null = null;\n  constructor(\n    authProvider: Provider<FirebaseAuthInternalName>,\n    messagingProvider: Provider<FirebaseMessagingName>\n  ) {\n    this.auth = authProvider.getImmediate({ optional: true });\n    this.messaging = messagingProvider.getImmediate({\n      optional: true\n    });\n\n    if (!this.auth) {\n      authProvider.get().then(\n        auth => (this.auth = auth),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n\n    if (!this.messaging) {\n      messagingProvider.get().then(\n        messaging => (this.messaging = messaging),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n  }\n\n  async getAuthToken(): Promise<string | undefined> {\n    if (!this.auth) {\n      return undefined;\n    }\n\n    try {\n      const token = await this.auth.getToken();\n      if (!token) {\n        return undefined;\n      }\n      return token.accessToken;\n    } catch (e) {\n      // If there's any error when trying to get the auth token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getInstanceIdToken(): Promise<string | undefined> {\n    if (\n      !this.messaging ||\n      !('Notification' in self) ||\n      Notification.permission !== 'granted'\n    ) {\n      return undefined;\n    }\n\n    try {\n      return this.messaging.getToken();\n    } catch (e) {\n      // We don't warn on this, because it usually means messaging isn't set up.\n      // console.warn('Failed to retrieve instance id token.', e);\n\n      // If there's any error when trying to get the token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getContext(): Promise<Context> {\n    const authToken = await this.getAuthToken();\n    const instanceIdToken = await this.getInstanceIdToken();\n    return { authToken, instanceIdToken };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nconst UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\n\nfunction mapValues(\n  // { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  o: { [key: string]: any },\n  f: (arg0: unknown) => unknown\n): object {\n  const result: { [key: string]: unknown } = {};\n  for (const key in o) {\n    if (o.hasOwnProperty(key)) {\n      result[key] = f(o[key]);\n    }\n  }\n  return result;\n}\n\nexport class Serializer {\n  // Takes data and encodes it in a JSON-friendly way, such that types such as\n  // Date are preserved.\n  encode(data: unknown): unknown {\n    if (data == null) {\n      return null;\n    }\n    if (data instanceof Number) {\n      data = data.valueOf();\n    }\n    if (typeof data === 'number' && isFinite(data)) {\n      // Any number in JS is safe to put directly in JSON and parse as a double\n      // without any loss of precision.\n      return data;\n    }\n    if (data === true || data === false) {\n      return data;\n    }\n    if (Object.prototype.toString.call(data) === '[object String]') {\n      return data;\n    }\n    if (Array.isArray(data)) {\n      return data.map(x => this.encode(x));\n    }\n    if (typeof data === 'function' || typeof data === 'object') {\n      return mapValues(data!, x => this.encode(x));\n    }\n    // If we got this far, the data is not encodable.\n    throw new Error('Data cannot be encoded in JSON: ' + data);\n  }\n\n  // Takes data that's been encoded in a JSON-friendly form and returns a form\n  // with richer datatypes, such as Dates, etc.\n  decode(json: unknown): unknown {\n    if (json == null) {\n      return json;\n    }\n    if ((json as { [key: string]: unknown })['@type']) {\n      switch ((json as { [key: string]: unknown })['@type']) {\n        case LONG_TYPE:\n        // Fall through and handle this the same as unsigned.\n        case UNSIGNED_LONG_TYPE: {\n          // Technically, this could work return a valid number for malformed\n          // data if there was a number followed by garbage. But it's just not\n          // worth all the extra code to detect that case.\n          const value = Number((json as { [key: string]: unknown })['value']);\n          if (isNaN(value)) {\n            throw new Error('Data cannot be decoded from JSON: ' + json);\n          }\n          return value;\n        }\n        default: {\n          throw new Error('Data cannot be decoded from JSON: ' + json);\n        }\n      }\n    }\n    if (Array.isArray(json)) {\n      return json.map(x => this.decode(x));\n    }\n    if (typeof json === 'function' || typeof json === 'object') {\n      return mapValues(json!, x => this.decode(x));\n    }\n    // Anything else is safe to return.\n    return json;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport {\n  FirebaseFunctions,\n  HttpsCallable,\n  HttpsCallableResult,\n  HttpsCallableOptions\n} from '@firebase/functions-types';\nimport { _errorForResponse, HttpsErrorImpl } from './error';\nimport { ContextProvider } from '../context';\nimport { Serializer } from '../serializer';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { FirebaseMessagingName } from '@firebase/messaging-types';\n\n/**\n * The response to an http request.\n */\ninterface HttpResponse {\n  status: number;\n  json: HttpResponseBody | null;\n}\n/**\n * Describes the shape of the HttpResponse body.\n * It makes functions that would otherwise take {} able to access the\n * possible elements in the body more easily\n */\nexport interface HttpResponseBody {\n  data?: unknown;\n  result?: unknown;\n  error?: {\n    message?: unknown;\n    status?: unknown;\n    details?: unknown;\n  };\n}\n\n/**\n * Returns a Promise that will be rejected after the given duration.\n * The error will be of type HttpsErrorImpl.\n *\n * @param millis Number of milliseconds to wait before rejecting.\n */\nfunction failAfter(\n  millis: number\n): {\n  timer: number | NodeJS.Timeout;\n  promise: Promise<never>;\n} {\n  let timer!: number | NodeJS.Timeout;\n  const promise = new Promise<never>((_, reject) => {\n    timer = setTimeout(() => {\n      reject(new HttpsErrorImpl('deadline-exceeded', 'deadline-exceeded'));\n    }, millis);\n  });\n\n  return {\n    timer,\n    promise\n  };\n}\n\n/**\n * The main class for the Firebase Functions SDK.\n */\nexport class Service implements FirebaseFunctions, FirebaseService {\n  private readonly contextProvider: ContextProvider;\n  private readonly serializer = new Serializer();\n  private emulatorOrigin: string | null = null;\n  private cancelAllRequests: Promise<void>;\n  private deleteService!: () => void;\n  private region: string;\n  private customDomain: string | null;\n\n  /**\n   * Creates a new Functions service for the given app and (optional) region or custom domain.\n   * @param app_ The FirebaseApp to use.\n   * @param regionOrCustomDomain_ one of:\n   *   a) A region to call functions from, such as us-central1\n   *   b) A custom domain to use as a functions prefix, such as https://mydomain.com\n   */\n  constructor(\n    private app_: FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    messagingProvider: Provider<FirebaseMessagingName>,\n    regionOrCustomDomain_: string = 'us-central1',\n    readonly fetchImpl: typeof fetch\n  ) {\n    this.contextProvider = new ContextProvider(authProvider, messagingProvider);\n    // Cancels all ongoing requests when resolved.\n    this.cancelAllRequests = new Promise(resolve => {\n      this.deleteService = () => {\n        return resolve();\n      };\n    });\n\n    // Resolve the region or custom domain overload by attempting to parse it.\n    try {\n      const url = new URL(regionOrCustomDomain_);\n      this.customDomain = url.origin;\n      this.region = 'us-central1';\n    } catch (e) {\n      this.customDomain = null;\n      this.region = regionOrCustomDomain_;\n    }\n  }\n\n  get app(): FirebaseApp {\n    return this.app_;\n  }\n\n  INTERNAL = {\n    delete: (): Promise<void> => {\n      return Promise.resolve(this.deleteService());\n    }\n  };\n\n  /**\n   * Returns the URL for a callable with the given name.\n   * @param name The name of the callable.\n   */\n  _url(name: string): string {\n    const projectId = this.app_.options.projectId;\n    if (this.emulatorOrigin !== null) {\n      const origin = this.emulatorOrigin;\n      return `${origin}/${projectId}/${this.region}/${name}`;\n    }\n\n    if (this.customDomain !== null) {\n      return `${this.customDomain}/${name}`;\n    }\n\n    return `https://${this.region}-${projectId}.cloudfunctions.net/${name}`;\n  }\n\n  /**\n   * Modify this instance to communicate with the Cloud Functions emulator.\n   *\n   * Note: this must be called before this instance has been used to do any operations.\n   *\n   * @param host The emulator host (ex: localhost)\n   * @param port The emulator port (ex: 5001)\n   */\n  useEmulator(host: string, port: number): void {\n    this.emulatorOrigin = `http://${host}:${port}`;\n  }\n\n  /**\n   * Changes this instance to point to a Cloud Functions emulator running\n   * locally. See https://firebase.google.com/docs/functions/local-emulator\n   *\n   * @deprecated Prefer the useEmulator(host, port) method.\n   * @param origin The origin of the local emulator, such as\n   * \"http://localhost:5005\".\n   */\n  useFunctionsEmulator(origin: string): void {\n    this.emulatorOrigin = origin;\n  }\n\n  /**\n   * Returns a reference to the callable https trigger with the given name.\n   * @param name The name of the trigger.\n   */\n  httpsCallable(name: string, options?: HttpsCallableOptions): HttpsCallable {\n    return data => {\n      return this.call(name, data, options || {});\n    };\n  }\n\n  /**\n   * Does an HTTP POST and returns the completed response.\n   * @param url The url to post to.\n   * @param body The JSON body of the post.\n   * @param headers The HTTP headers to include in the request.\n   * @return A Promise that will succeed when the request finishes.\n   */\n  private async postJSON(\n    url: string,\n    body: {},\n    headers: { [key: string]: string }\n  ): Promise<HttpResponse> {\n    headers['Content-Type'] = 'application/json';\n\n    let response: Response;\n    try {\n      response = await this.fetchImpl(url, {\n        method: 'POST',\n        body: JSON.stringify(body),\n        headers\n      });\n    } catch (e) {\n      // This could be an unhandled error on the backend, or it could be a\n      // network error. There's no way to know, since an unhandled error on the\n      // backend will fail to set the proper CORS header, and thus will be\n      // treated as a network error by fetch.\n      return {\n        status: 0,\n        json: null\n      };\n    }\n    let json: HttpResponseBody | null = null;\n    try {\n      json = await response.json();\n    } catch (e) {\n      // If we fail to parse JSON, it will fail the same as an empty body.\n    }\n    return {\n      status: response.status,\n      json\n    };\n  }\n\n  /**\n   * Calls a callable function asynchronously and returns the result.\n   * @param name The name of the callable trigger.\n   * @param data The data to pass as params to the function.s\n   */\n  private async call(\n    name: string,\n    data: unknown,\n    options: HttpsCallableOptions\n  ): Promise<HttpsCallableResult> {\n    const url = this._url(name);\n\n    // Encode any special types, such as dates, in the input data.\n    data = this.serializer.encode(data);\n    const body = { data };\n\n    // Add a header for the authToken.\n    const headers: { [key: string]: string } = {};\n    const context = await this.contextProvider.getContext();\n    if (context.authToken) {\n      headers['Authorization'] = 'Bearer ' + context.authToken;\n    }\n    if (context.instanceIdToken) {\n      headers['Firebase-Instance-ID-Token'] = context.instanceIdToken;\n    }\n\n    // Default timeout to 70s, but let the options override it.\n    const timeout = options.timeout || 70000;\n\n    const { timer, promise: failAfterPromise } = failAfter(timeout);\n\n    const response = await Promise.race([\n      clearTimeoutWrapper(timer, this.postJSON(url, body, headers)),\n      failAfterPromise,\n      clearTimeoutWrapper(timer, this.cancelAllRequests)\n    ]);\n\n    // If service was deleted, interrupted response throws an error.\n    if (!response) {\n      throw new HttpsErrorImpl(\n        'cancelled',\n        'Firebase Functions instance was deleted.'\n      );\n    }\n\n    // Check for an error status, regardless of http status.\n    const error = _errorForResponse(\n      response.status,\n      response.json,\n      this.serializer\n    );\n    if (error) {\n      throw error;\n    }\n\n    if (!response.json) {\n      throw new HttpsErrorImpl(\n        'internal',\n        'Response is not valid JSON object.'\n      );\n    }\n\n    let responseData = response.json.data;\n    // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\n    // backwards compatibility.\n    if (typeof responseData === 'undefined') {\n      responseData = response.json.result;\n    }\n    if (typeof responseData === 'undefined') {\n      // Consider the response malformed.\n      throw new HttpsErrorImpl('internal', 'Response is missing data field.');\n    }\n\n    // Decode any special types, such as dates, in the returned data.\n    const decodedData = this.serializer.decode(responseData);\n\n    return { data: decodedData };\n  }\n}\n\nasync function clearTimeoutWrapper<T>(\n  timer: number | NodeJS.Timeout,\n  promise: Promise<T>\n): Promise<T> {\n  const result = await promise;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  clearTimeout(timer as any);\n  return result;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Service } from './api/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\n\n/**\n * Type constant for Firebase Functions.\n */\nconst FUNCTIONS_TYPE = 'functions';\n\nexport function registerFunctions(\n  instance: _FirebaseNamespace,\n  fetchImpl: typeof fetch\n): void {\n  const namespaceExports = {\n    // no-inline\n    Functions: Service\n  };\n\n  function factory(\n    container: ComponentContainer,\n    regionOrCustomDomain?: string\n  ): Service {\n    // Dependencies\n    const app = container.getProvider('app').getImmediate();\n    const authProvider = container.getProvider('auth-internal');\n    const messagingProvider = container.getProvider('messaging');\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new Service(\n      app,\n      authProvider,\n      messagingProvider,\n      regionOrCustomDomain,\n      fetchImpl\n    );\n  }\n  instance.INTERNAL.registerComponent(\n    new Component(FUNCTIONS_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport * as types from '@firebase/functions-types';\nimport { registerFunctions } from './src/config';\n\nimport { name, version } from './package.json';\n\nregisterFunctions(firebase as _FirebaseNamespace, fetch.bind(self));\nfirebase.registerVersion(name, version);\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    functions?: {\n      (app?: FirebaseApp): types.FirebaseFunctions;\n      Functions: typeof types.FirebaseFunctions;\n    };\n  }\n  interface FirebaseApp {\n    functions?(regionOrCustomDomain?: string): types.FirebaseFunctions;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}